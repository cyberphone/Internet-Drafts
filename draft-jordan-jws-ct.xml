<?xml version='1.0' encoding='utf-8'?>

<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<rfc xmlns:xi="http://www.w3.org/2001/XInclude"
     submissionType="independent"
     category="info"
     tocDepth="3"
     docName="draft-jordan-jws-ct"
     ipr="trust200902"
     obsoletes=""
     updates=""
     xml:lang="en"
     tocInclude="true"
     symRefs="true"
     sortRefs="true"
     version="3">
    <front>
        <title abbrev="JWS/CT">
            JWS Clear-text JSON Signature Option (JWS/CT)
        </title>
        <author fullname="Bret Jordan" initials="B." surname="Jordan" role="editor">
            <organization>Broadcom</organization>
            <address>
                <postal>
                    <street>1320 Ridder Park Drive</street>
                    <region>CA</region>
                    <code>95131</code>
                    <city>San Jose</city>
                    <country>United States of America</country>
                </postal>
                <email>bret.jordan@broadcom.com</email>
            </address>
        </author>
        <author fullname="Samuel Erdtman" initials="S." surname="Erdtman">
            <organization>Spotify AB</organization>
            <address>
                <postal>
                    <street>Birger Jarlsgatan 61, 4tr</street>
                    <code>113 56</code>
                    <city>Stockholm</city>
                    <country>Sweden</country>
                </postal>
                <email>erdtman@spotify.com</email>
            </address>
        </author>
        <author fullname="Anders Rundgren" initials="A." surname="Rundgren">
            <organization>Independent</organization>
            <address>
                <postal>
                    <city>Montpellier</city>
                    <country>France</country>
                </postal>
                <email>anders.rundgren.net@gmail.com</email>
                <uri>https://www.linkedin.com/in/andersrundgren/</uri>
            </address>
        </author>
        <date year="2020"/>
        <area>Security</area>
        <workgroup/>
        <keyword>JSON</keyword>
        <keyword>Signatures</keyword>
        <keyword>Cryptography</keyword>
        <keyword>Canonicalization</keyword>

        <abstract>
            <t>
                This document describes how JSON objects can be complemented
                with enveloped signatures based on the JSON Web Signature (JWS) standard.
                By combining the "detached" mode of JWS with the 
                JSON Canonicalization Scheme (JCS), signed JSON objects may 
                be kept in the JSON format (aka "clear&nbsp;text" signing).
            </t>
        </abstract>
    </front>
    <middle>
        <section anchor="Introduction" numbered="true" toc="default">
            <name>Introduction</name>
            <t>
                This specification introduces a method for augmenting objects expressed in the
                JSON <xref target="RFC8259" format="default"/> notation,
                with enveloped signatures, similar to the scheme used in 
                the XML&nbsp;Signature <xref target="XMLDSIG" format="default"/> standard.
                For interoperability reasons this specification constrains JSON objects
                to the I-JSON <xref target="RFC7493" format="default"/> subset.
            </t>
            <t>
                To avoid "reinventing the wheel", this specification leverages the
                JSON Web Signature (JWS) <xref target="RFC7515" format="default"/> standard.
            </t>
            <t>
                By exploiting the "detached" mode of JWS
                in combination with the JSON Canonicalizion Scheme (JCS)
                <xref target="RFC8785" format="default"/>,
                JSON objects to be signed can be kept in the JSON format.
                This arrangement is here referred to as JWS/CT, where CT stands for
                "Clear&nbsp;Text" signing.
            </t>
            <t>
                The primary motivations for keeping signed JSON objects in the JSON format
                include <em>simplified documentation</em>, <em>debugging</em>, and <em>logging</em>,
                as well as for maintaining a <em>consistent message structure</em>. 
                The latter is at odds with JWS in the "standard" mode which
                transforms JSON objects to be signed into base64url-encoded
                <xref target="RFC4648" format="default"/>
                signature containers with embedded data.
            </t>
            <t>
                Another target are HTTP-based signature schemes that currently
                utilize HTTP header values for holding detached signatures.
                By rather using the method described herein,
                signed JSON-formatted HTTP requests and responses
                may be self-contained and thus be <em>serializable</em>.
                The latter facilitates such data to be
            </t>
            <ul spacing="compact">
                <li>stored in databases</li>
                <li>passed through intermediaries</li>
                <li>embedded in other JSON objects</li>
                <li>counter-signed</li>
            </ul>
            <t>
                <xref target="multiple.signatures" format="default"/> shows an example of embedding
                and counter-signing using JWS/CT.
            </t>
            <t>
                without losing the ability to (at any time) verify signatures.
            </t>
            <t>
                The intended audiences of this document are JSON tool vendors as
                well as designers of JSON-based cryptographic solutions.
            </t>
        </section>
        <section anchor="Terminology" numbered="true" toc="default">
            <name>Terminology</name>
            <t>
                Note that this document is not on the IETF standards track. However, a
                conformant implementation is supposed to adhere to the specified behavior for
                security and interoperability reasons.  This text uses BCP 14 to
                describe that necessary behavior.
            </t>
            <t>
                The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
                "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>
                    SHALL
                    NOT
                </bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
                "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
                "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are
                to be interpreted as described in BCP&nbsp;14 <xref target="RFC2119"/>
                <xref target="RFC8174"/> when, and only when, they appear in all capitals,
                as shown here.
            </t>
        </section>

        <section anchor="Operation" numbered="true" toc="default">
            <name>Detailed Operation</name>
            <t>
                This section describes the details related to signing
                and validating signatures based on this specification.
                Note that JWS/CT depends on the JWS <em>Compact Serialization</em> mode.
            </t>
            <t>
                The signature creation and signature validation sections
                feature samples using the <tt>HS256</tt> JOSE algorithm 
                <xref target="RFC7518" format="default"/>
                with a 256-bit key having the following value here expressed as hexadecimal bytes:
            </t>
            <sourcecode type="test-vectors">
7f dd 85 1a 3b 9d 2d af c5 f0 d0 00 30 e2 2b 93 43 90 0c d4 2e de
49 48 56 8a 4a 2e e6 55 29 1a
            </sourcecode>
            <t>
                Note that the contents of JWS headers as well as things
                related to signature algorithms and cryptographic keys,
                are out of scope for this specification.
                In fact, the only "connection" between JWS/CT and JWS is the processing outlined in
                <eref target="https://tools.ietf.org/html/rfc7515#appendix-F"/>.
                See also <xref target="alt.algorithm" format="default"/>.
            </t>
            <section anchor="signing" numbered="true" toc="default">
                <name>Signature Creation</name>
                <t>
                    The following sub-sections describe how JSON objects can be signed
                    according to the JWS/CT specification.
                </t>
                <section anchor="signing.data.creation" numbered="true" toc="default">
                    <name>Create the JSON Object to be Signed</name>
                    <t>
                        Create or parse the JSON object to be signed.
                        Note that JCS <xref target="RFC8785" format="default"/>
                        constrains objects to the I-JSON
                        <xref target="RFC7493" format="default"/> subset.
                    </t>
                    <t>
                        For illustrating the subsequent operations the following sample object is used:
                    </t>
                    <sourcecode type="json">
{
  "statement": "Hello signed world!",
  "otherProperties": [2000, true]
}
                    </sourcecode>
                </section>
                <section anchor="signing.canonicalize" numbered="true" toc="default">
                    <name>Canonicalize the JSON Object to be Signed</name>
                    <t>
                        Use the result of the previous step as input to the
                        canonicalization process described in JCS
                        <xref target="RFC8785" format="default"/>.
                    </t>
                    <t>
                        Applied to the sample, the following JSON string should be generated:
                    </t>
                    <sourcecode type="json">
{"otherProperties":[2000,true],"statement":"Hello signed world!"}
                    </sourcecode>
                    <t>
                        After encoding the string above in the UTF-8 <xref target="UNICODE" format="default"/>
                        format, the following bytes (here in hexadecimal notation) should be generated:
                    </t>
                    <sourcecode type="test-vectors">
7b 22 6f 74 68 65 72 50 72 6f 70 65 72 74 69 65 73 22 3a 5b 32 30
30 30 2c 74 72 75 65 5d 2c 22 73 74 61 74 65 6d 65 6e 74 22 3a 22
48 65 6c 6c 6f 20 73 69 67 6e 65 64 20 77 6f 72 6c 64 21 22 7d
                    </sourcecode>
                </section>
                <section anchor="signing.create.jws" numbered="true" toc="default">
                    <name>Generate a JWS String</name>
                    <t>
                        Use the result of the previous step as <tt>JWS&nbsp;Payload</tt> to the
                        signature process described in
                        <eref target="https://tools.ietf.org/html/rfc7515#appendix-F"/> of JWS
                        <xref target="RFC7515" format="default"/>.
                    </t>
                    <t>
                        Note: although it is true that using the "Unencoded Payload" mode of RFC7797
                        <xref target="RFC7797" format="default"/> would eliminate an <em>internal-only</em>,
                        base64url encoding step, the performance hit should be marginal for most real-world applications.
                        The current design also makes JWS/CT independent of JWS library support for the
                        <tt>"b64":false</tt> and <tt>"crit":["b64"]</tt> 
                        JWS header items required by RFC7797.  However, this specification does not
                        in any way "outlaw" the use RFC7797, it rather leaves it as an <em>implementer option</em>.
                    </t>
                    <t>
                        For the sample, the JWS header is assumed to be <tt>{"alg":"HS256"}</tt>.
                        The resulting JWS string should then after payload removal
                        and using the key specified in <xref target="Operation" format="default"/>,
                        read as follows:
                    </t>
                    <sourcecode type="test-vectors">
eyJhbGciOiJIUzI1NiJ9..VHVItCBCb8Q5CI-49imarDtJeSxH2uLU0DhqQP5Zjw4
                    </sourcecode>
                </section>
                <section anchor="signing.final" numbered="true" toc="default">
                    <name>Assemble the Signed JSON Object</name>
                    <t>
                        Before a complete signed object can be created, a dedicated top-level
                        property for holding the JWS signature string needs to be defined.
                        The only requirement is that this property <bcp14>MUST NOT</bcp14> clash
                        with any other top-level property name.  
                        The JWS string itself <bcp14>MUST</bcp14> be supplied as a
                        JSON string argument ("") to the signature property.
                    </t>
                    <t>
                        For the sample, the property name <tt>"signature"</tt> is assumed to be the designated holder of the JWS string.
                        Equipped with a signature property, the JWS string from the previous
                        section, and the original JSON sample, the process above should result
                        in the following, now signed JSON object:
                    </t>
                    <sourcecode type="json">
{
  "statement": "Hello signed world!",
  "otherProperties": [2000, true],
  "signature": "eyJhbGciOiJIUzI1NiJ9..VHVItCBCb8Q5CI-49imar
DtJeSxH2uLU0DhqQP5Zjw4"
}
                    </sourcecode>
                    <t>
                        Note: the line-break in the <tt>"signature"</tt> argument was added for display purposes only.
                    </t>
                    <t>
                        Note: you could equally well apply the signature
                        to the canonicalized version of the JSON object.
                        However, the rearrangement of properties (performed by JCS),
                        may sometimes be considered an issue from a "human" point of view,
                        while computing-wise the order of JSON properties has no impact
                        on the outcome.
                    </t>
                </section>
            </section>
            <section anchor="validation" numbered="true" toc="default">
                <name>Signature Validation</name>
                <t>
                    The following sub-sections describe how JSON objects signed
                    according to the JWS/CT specification can be validated.
                </t>
                <section anchor="validation.parse.input" numbered="true" toc="default">
                    <name>Parse the Signed JSON Object</name>
                    <t>
                        Parse the JSON object that is anticipated to be signed.
                        Note that JCS <xref target="RFC8785" format="default"/>
                        constrains objects to the I-JSON
                        <xref target="RFC7493" format="default"/> subset.
                        If the parsing is unsuccessful,
                        the operation <bcp14>MUST</bcp14>
                        cause a compliant implementation to terminate
                        with an appropriate error.
                    </t>
                    <t>
                        To illustrate the subsequent operations the signed JSON object
                        featured in <xref target="signing.final" format="default"/> is used as sample.
                   </t>
                </section>
                <section anchor="validation.fetch.signprop" numbered="true" toc="default">
                    <name>Fetch the Signature Property String</name>
                    <t>
                        After successful parsing, retrieve the designated JSON top-level
                        property holding the JWS string.  If the property is missing
                        or its argument is not a JSON string (""),
                        the operation <bcp14>MUST</bcp14>
                        cause a compliant implementation to terminate
                        with an appropriate error.
                    </t>
                    <t>
                        For the sample, where the property named <tt>"signature"</tt> is assumed to hold the JWS string,
                        the operation above should return the following string: 
                   </t>
                    <sourcecode type="test-vectors">
eyJhbGciOiJIUzI1NiJ9..VHVItCBCb8Q5CI-49imarDtJeSxH2uLU0DhqQP5Zjw4
                    </sourcecode>
                </section>
                <section anchor="validation.remove.signprop" numbered="true" toc="default">
                    <name>Remove the Signature Property String</name>
                    <t>
                        Since the signature is calculated over the actual JSON object
                        data, the designated signature property and its argument <bcp14>MUST</bcp14>
                        be removed from the signed JSON object.
                    </t>
                    <t>
                        If applied to the sample the resulting JSON object should read as follows: 
                   </t>
                    <sourcecode type="json">
{
  "statement": "Hello signed world!",
  "otherProperties": [2000, true]
}
                    </sourcecode>
                    <t>
                        Note: JSON tools usally by default remove whitespace.
                        In addition, the original ordering of properties may
                        not always be honored.
                        However, none of this has (due to the canonicalization performed by JCS),
                        any impact on the result.
                    </t>
                </section>            
                <section anchor="validation.canonicalize" numbered="true" toc="default">
                    <name>Canonicalize the Remaining JSON Object</name>
                    <t>
                        Use the result of the previous step as input to the
                        canonicalization process described in JCS
                        <xref target="RFC8785" format="default"/>.
                    </t>
                    <t>
                        If applied to the sample the result of the process above should read as follows: 
                   </t>
                    <sourcecode type="json">
{"otherProperties":[2000,true],"statement":"Hello signed world!"}
                    </sourcecode>
                    <t>
                        After encoding the string above in the UTF-8 <xref target="UNICODE" format="default"/>
                        format, the following bytes (here in hexadecimal notation) should be generated:
                    </t>
                    <sourcecode type="test-vectors">
7b 22 6f 74 68 65 72 50 72 6f 70 65 72 74 69 65 73 22 3a 5b 32 30
30 30 2c 74 72 75 65 5d 2c 22 73 74 61 74 65 6d 65 6e 74 22 3a 22
48 65 6c 6c 6f 20 73 69 67 6e 65 64 20 77 6f 72 6c 64 21 22 7d
                    </sourcecode>
                </section>
                <section anchor="validation.finalstep.jws" numbered="true" toc="default">
                    <name>Validate the JWS String</name>
                    <t>
                        After extracting the detached mode JWS string and canonicalizing the JSON object
                        (to retrieve the <tt>JWS&nbsp;Payload</tt>),
                        the JWS string <bcp14>MUST</bcp14> be restored as described in
                        <eref target="https://tools.ietf.org/html/rfc7515#appendix-F"/> of JWS
                        <xref target="RFC7515" format="default"/>.
                        The actual JWS validation procedure is not specified
                        here because it is covered by <xref target="RFC7515" format="default"/>
                        and also depends on application-specific policies like:
                    </t>
                    <ul spacing="compact">
                        <li>Accepted JWS signature algorithms</li>
                        <li>Accepted and/or required JWS header elements</li>
                        <li>Signature key lookup methods</li>
                    </ul>
                    <t>
                        If the validation process for some reason fails, 
                        the operation <bcp14>MUST</bcp14>
                        cause a compliant implementation to terminate
                        with an appropriate error.
                    </t>
                    <t>
                        For the sample, validation is straightforward since both the algorithm and
                        the key to use are predefined (see <xref target="Operation" format="default"/>).
                        The input string to the JWS validator should after the process step above read as follows (disregarding
                        the line-breaks that were added for display purposes only):
                   </t>
                    <sourcecode type="test-vectors">
eyJhbGciOiJIUzI1NiJ9.eyJvdGhlclByb3BlcnRpZXMiOlsyMDAwLHRydWVdLCJzdGF0
ZW1lbnQiOiJIZWxsbyBzaWduZWQgd29ybGQhIn0.VHVItCBCb8Q5CI-49imarDtJeSxH2
uLU0DhqQP5Zjw4
                    </sourcecode>
                </section>
            </section>
        </section>
        <section anchor="IANA" numbered="true" toc="default">
            <name>IANA Considerations</name>
            <t>
                This document has no IANA actions.
            </t>
        </section>
        <section anchor="Security" numbered="true" toc="default">
            <name>Security Considerations</name>
            <t>
                This specification inherits all the security considerations
                of JWS <xref target="RFC7515" format="default"/>
                and JCS <xref target="RFC8785" format="default"/>.
            </t>
            <t>
                In similarity to any other signature specification,
                it is crucial that signatures are verified before
                acting on the signed payload.
            </t>
            <t>
                For usage in a wider community, the name of the designated
                signature property becomes a critical factor that
                <bcp14>MUST</bcp14> be documented and communicated.
                However, in a properly designed system, a faulty or
                missing signature <bcp14>MUST</bcp14> "only" lead to
                failed operation, and not to a security breach.
            </t>
        </section>
    </middle>
    <back>
        <references>
            <name>References</name>
            <references>
                <name>Normative References</name>

                <xi:include
                    href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
                <xi:include
                    href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8259.xml"/>
                <xi:include
                    href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
                <xi:include
                    href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7493.xml"/>
                <xi:include
                    href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7515.xml"/>
                <xi:include
                    href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7518.xml"/>
                <xi:include
                    href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8785.xml"/>

                <reference anchor="UNICODE"
                   target="https://www.unicode.org/versions/latest/">
                    <front>
                        <title>The Unicode Standard</title>
                        <author>
                            <organization>The Unicode Consortium</organization>
                        </author>
                    </front>
                </reference>

            </references>
            <references>

                <name>Informative References</name>

                <xi:include
                    href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4648.xml"/>

                <xi:include
                    href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7797.xml"/>

                <xi:include
                    href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8037.xml"/>

                <xi:include
                    href="https://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7517.xml"/>                

                <reference anchor="XMLDSIG"
                   target="https://www.w3.org/TR/xmldsig-core1/">
                    <front>
                        <title>XML Signature Syntax and Processing Version 1.1</title>
                        <author>
                            <organization>W3C</organization>
                        </author>
                        <date month="April" year="2013"/>
                    </front>
                    <refcontent>W3C Recommendation</refcontent>
                </reference>

            </references>
        </references>
        <section anchor="open.source" numbered="true" toc="default">
            <name>Open-Source Implementations</name>
            <t>
                Due to the simplicity of this specification, there is hardly a need for
                specific support software.
                However, JCS which is (at the time of writing), a relatively new design,
                may be fetched as a separate component for multiple platforms.
                The following open-source implementations have been verified to be
                compatible with JCS:
            </t>
            <ul spacing="normal">
                <li>
                    JavaScript: <eref
      target="https://www.npmjs.com/package/canonicalize"
      brackets="angle"/>
                </li>
                <li>
                    Java: <eref
            target="https://mvnrepository.com/artifact/io.github.erdtman/java-json-canonicalization"
            brackets="angle"/>
                </li>
                <li>
                    Go: <eref
              target="https://github.com/cyberphone/json-canonicalization/tree/master/go"
                brackets="angle"/>
                </li>
                <li>
                    .NET/C#: <eref
         target="https://github.com/cyberphone/json-canonicalization/tree/master/dotnet"
           brackets="angle"/>
                </li>
                <li>
                    Python: <eref
          target="https://github.com/cyberphone/json-canonicalization/tree/master/python3"
            brackets="angle"/>
                </li>
            </ul>
        </section>
        <section anchor="multiple.signatures" numbered="true" toc="default">
            <name>Multiple Signatures</name>
            <t>
                JWS/CT does not <em>natively</em> support multiple signatures.
                However, by embedding JWS/CT objects in other
                JWS/CT objects this functionality can be emulated.
                Consider the following JWS/CT object showing an imaginary
                real estate business record:
            </t>
            <sourcecode type="json">
{
  "gps": [38.89768255588178, -77.03658644893932],
  "object": {"type": "house", "price": "$635,000"},
  "role": "buyer",
  "name": "John Smith",
  "timeStamp": "2020-11-08T13:56:08Z",
  "signature": "&lt;&lt;Buyer JWS Signature&gt;&gt;"
}
            </sourcecode>
            <t>
                Adding a notary signature on top of this could be performed
                by embedding the former object as follows:
            </t>
            <sourcecode type="json">
{
  "attesting": {
    "gps": [38.89768255588178, -77.03658644893932],
    "object": {"type": "house", "price": "$635,000"},
    "role": "buyer",
    "name": "John Smith",
    "timeStamp": "2020-11-08T13:56:08Z",
    "signature": "&lt;&lt;Buyer JWS Signature&gt;&gt;"
  },
  "role": "notary",
  "name": "Carol Lombardi-Jones",
  "timeStamp": "2020-11-08T13:58:42Z",
  "signature": "&lt;&lt;Notary JWS Signature&gt;&gt;"
}
            </sourcecode>
            <t>
                Note: this means that the notary's signature signs not only the
                notary data, but the buyers's data as well.
                In most cases this way of adding signatures is advantageous since it
                maintains the actual order of the signature events which also cannot
                be tampered with without invalidating the outermost signature.
            </t>
            <t>
                Note: another possibility would be supporting arrays of JWS signatures strings.
                This has the drawback that signer-related meta data like the <tt>"role"</tt>
                and <tt>"timeStamp"</tt> properties must be put in the base64url-encoded JWS strings,
                which defeats the purpose of a "Clear&nbsp;Text" signature scheme.
            </t>
            <t>
                Note: in the case the signing entities are "peers" or are unrelated to each other,
                the sample above would not be useful since it anticipates a specific flow.
                For supporting <em>independent</em> or <em>asynchronous</em> signers targeting
                a common document or data object, an imaginable solution is using a scheme where each signer
                rather calculates a hash of the target document/data and includes the hash with
                the signer-specific meta data like the following:
            </t>
            <sourcecode type="json">
{

  &lt;&lt;Common Document/Data to Sign...&gt;&gt;

  "signers": [{
    "sha256": "&lt;&lt;Hash of Document/Data to Sign&gt;&gt;",

    &lt;&lt;Signer-related meta data...&gt;&gt;

    "signature": "&lt;&lt;Signer JWS Signature&gt;&gt;"
  },{
    "sha256": "&lt;&lt;Hash of Document/Data to Sign&gt;&gt;",

    &lt;&lt;Signer-related meta data...&gt;&gt;

    "signature": "&lt;&lt;Signer JWS Signature&gt;&gt;"
  }]
}
            </sourcecode>
            <t>
                In this case the object to sign would not be limited to JSON; it could for example be a PDF document
                hosted on a specific URL.
                Note that the relying party would have to update the structure for each signature received.
                In some cases a database would probably be more useful for holding individual signatures
                since a database can cope with any number of signers as well as keeping track of who
                have actually signed.  The latter is crucial for things like international treaties and
                company board statements. 
            </t>
        </section>

        <section anchor="alt.algorithm" numbered="true" toc="default">
            <name>Test Vector Using the Ed25519 Algorithm</name>
            <t>
                Although JWS/CT is <em>agnostic</em> to the cryptography used by JWS component,
                it might be of some value having a reference that uses another
                algorithm and key than featured in <xref target="Operation" format="default"/>.
                This appendix shows how a signed version of the JSON sample object in 
                <xref target="signing.data.creation" format="default"/> would look like
                if applying the <tt>Ed25519</tt> algorithm described in RFC&nbsp;8037
                <xref target="RFC8037" format="default"/>:
            </t>
            <sourcecode type="json">
{
  "statement": "Hello signed world!",
  "otherProperties": [2000, true],
  "signature": "eyJhbGciOiJFZERTQSJ9..WAyfK782CRkJh4hcP-OQ3qUYpH
6xY3vfFhaRSzNgG5Eu4p54SyTX25-HjNRN8qE5hmMovd8tycp6I9uqRofiBg"
}
            </sourcecode>
            <t>
                Note: the line-break in the <tt>"signature"</tt> argument was added for display purposes only.
            </t>
            <t>
                The sample above depends on a JWS header holding the algorithm 
                <tt>{"alg":"EdDSA"}</tt>, and the following private key, here expressed in
                the JWK <xref target="RFC7517" format="default"/> format:
                
            </t>
            <sourcecode type="json">
{
  "kty": "OKP",
  "crv": "Ed25519",
  "x": "_kms9bkrbpI1lPLoM2j2gKySS-k89TOuyvgC43dX-Mk",
  "d": "0flr-6bXs459f9qwAq20Zs3NizTGIEH5_rTDFoumFV4"
}
            </sourcecode>
        </section>

        <section anchor="Acknowledgements" numbered="false" toc="default">
            <name>Acknowledgements</name>
            <t>
                People who have contributed directly and indirectly with 
                valuable input to this specification include
                <contact fullname="Vladimir Dzhuvinov"/>,
                <contact fullname="Freddi Gyara"/>,
                and
                <contact fullname="Filip Skokan"/>.
            </t>
        </section>
    </back>
</rfc>
