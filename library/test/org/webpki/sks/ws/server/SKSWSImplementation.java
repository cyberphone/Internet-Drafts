/*
 *  Copyright 2006-2018 WebPKI.org (http://webpki.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
package org.webpki.sks.ws.server;

        ///////////////////////////////////////////////
        // Generated by WSCreator 1.0 - Do not edit! //
        ///////////////////////////////////////////////

import java.io.IOException;

import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.MessageDigest;
import java.security.PublicKey;

import java.security.cert.X509Certificate;

import java.security.interfaces.ECPublicKey;

import java.security.spec.X509EncodedKeySpec;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;

import javax.xml.ws.Endpoint;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import org.webpki.crypto.CertificateUtil;
import org.webpki.crypto.CustomCryptoProvider;

import org.webpki.sks.DeviceInfo;
import org.webpki.sks.EnumeratedKey;
import org.webpki.sks.EnumeratedProvisioningSession;
import org.webpki.sks.Extension;
import org.webpki.sks.InputMethod;
import org.webpki.sks.KeyAttributes;
import org.webpki.sks.KeyData;
import org.webpki.sks.KeyProtectionInfo;
import org.webpki.sks.PatternRestriction;
import org.webpki.sks.ProvisioningSession;
import org.webpki.sks.SKSException;
import org.webpki.sks.SecureKeyStore;

import org.webpki.sks.ws.TrustedGUIAuthorization;

import org.webpki.util.DebugFormatter;

/**
 * SKS Web Service Implementation.
 *
 * The purpose of the Web Service is creating a "singleton"
 * service that can concurrently be called by arbitrary
 * SKS-using applications.  The Web Service can be connected
 * to any conformant SKS implementation.
 */ 
@WebService(serviceName="SKSWS",
            targetNamespace="http://xmlns.webpki.org/sks/v1.00",
            name="SKSWS.Interface",
            portName="SKSWS.Port",
            wsdlLocation="META-INF/SKSWS.wsdl")
public class SKSWSImplementation
  {

    static LinkedHashMap<String,SecureKeyStore> devices = new LinkedHashMap<String,SecureKeyStore> ();
    
    static TrustedGUIAuthorization tga;
    
    static SecureKeyStore default_device;
    
    static boolean debug;
    
    static final byte[] EC_OID = {0x06, 0x07, 0x2A, (byte) 0x86,  0x48, (byte) 0xCE, 0x3D, 0x02, 0x01};
    
    static
      {
        try
          {
            CustomCryptoProvider.forcedLoad (true);
            tga = (TrustedGUIAuthorization) Class.forName (System.getProperty ("sks.auth.gui")).newInstance ();
            String implementations = System.getProperty ("sks.implementation");
            debug = new Boolean (System.getProperty ("sks.debug"));
            while (implementations != null)
              {
                String impl = implementations;
                int next = implementations.indexOf (':');
                if (next > 0)
                  {
                    impl = implementations.substring (0, next);
                    implementations = implementations.substring (next + 1);
                  }
                else
                  {
                    implementations = null;
                  }
                SecureKeyStore sks = (SecureKeyStore) Class.forName (impl).newInstance ();
                if (default_device == null)
                  {
                    default_device = sks;
                  }
                DeviceInfo device_info = sks.getDeviceInfo ();
                String deviceId = DebugFormatter.getHexString (MessageDigest.getInstance ("SHA1").digest (device_info.getCertificatePath ()[0].getEncoded ()));
                devices.put (deviceId, sks);
                System.out.println ("Device: " + device_info.getVendorDescription ());
                System.out.println ("Vendor: " + device_info.getVendorName ());
                System.out.println ("API Version: " + device_info.getApiLevel () / 100 + "." + 
                                                     (device_info.getApiLevel () / 10) % 10 + 
                                                     (device_info.getApiLevel () % 10 == 0 ? "" : "" + device_info.getApiLevel () % 10));
                System.out.println ("DeviceID: " + deviceId);
              }
            if (default_device == null)
              {
                System.out.println ("No devices found, ABORT!");
                System.exit (3);
              }
            System.out.println ("Trusted GUI: " + tga.getImplementation ());
          }
        catch (ClassNotFoundException e)
          {
            throw new RuntimeException (e);
          }
        catch (InstantiationException e)
          {
            throw new RuntimeException (e);
          }
        catch (IllegalAccessException e)
          {
            throw new RuntimeException (e);
          }
        catch (GeneralSecurityException e)
          {
            throw new RuntimeException (e);
          }
        catch (SKSException e)
          {
            throw new RuntimeException (e);
          }
      }
    
    void log (String message)
      {
        if (debug)
          {
            System.out.println (message);
          }
      }
      
    void log (String deviceId, String message)
      {
        log (deviceId == null ? message : deviceId + ":" + message);
      }
      
    SecureKeyStore getDevice (String deviceId) throws SKSException
      {
        if (deviceId == null)
          {
            return default_device;
          }
        SecureKeyStore sks = devices.get (deviceId);
        if (sks == null)
          {
             throw new SKSException ("No such device: " + deviceId, SKSException.ERROR_NOT_AVAILABLE);
          }
        return sks;
      }

    String getEndEntityName (X509Certificate[] path)
      {
        return path[0].getIssuerX500Principal ().toString () + " / " + path[0].getSubjectX500Principal ().toString ();
      }

    String getConnectionPort (String deviceId) throws SKSException
      {
        return null;  // Not implemented
      }

    PublicKey createPublicKeyFromBlob (byte[] blob) throws SKSException
      {
        boolean ec_flag = false;
        for (int j = 4; j < 11; j++)
          {
            ec_flag = true;
            for (int i = 0; i < EC_OID.length; i++)
              {
                if (blob[j + i] != EC_OID[i])
                  {
                    ec_flag = false;
                  }
              }
            if (ec_flag) break;
          }
        try
          { 
            return KeyFactory.getInstance (ec_flag ? "EC" : "RSA").generatePublic (new X509EncodedKeySpec (blob));
          }
        catch (GeneralSecurityException e)
          {
            throw new SKSException (e);
          }
      }

    ECPublicKey getECPublicKey (byte[] blob) throws SKSException
      {
        PublicKey publicKey = createPublicKeyFromBlob (blob);
        if (publicKey instanceof ECPublicKey)
          {
            return (ECPublicKey) publicKey;
          }
        throw new SKSException ("Expected EC key");
      }

    byte[] checkAuthorization (String deviceId,
                               boolean trusted_gui_authorization,
                               int keyHandle,
                               byte[] authorization) throws SKSException
      {
        log (deviceId, "Local:getKeyProtectionInfo (KeyHandle=" + keyHandle + ")");
        KeyProtectionInfo kpi = getDevice (deviceId).getKeyProtectionInfo (keyHandle);
        if (kpi.hasLocalPinProtection ())
          {
            if (kpi.getPinInputMethod () == InputMethod.TRUSTED_GUI && !trusted_gui_authorization)
              {
                String error = "Missing required \"TrustedGUIAuthorization\" for key #" + keyHandle;
                log (error);
                throw new SKSException (error);
              }
            if (trusted_gui_authorization)
              {
                log ("Restore authorization for KeyHandle=" + keyHandle);
                authorization = tga.restoreTrustedAuthorization (authorization);
              }
          }
        return authorization;
      }

    @WebMethod(operationName="getDeviceInfo")
    @RequestWrapper(localName="getDeviceInfo", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="getDeviceInfo.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void getDeviceInfo (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String deviceId,
                               @WebParam(name="APILevel", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<Short> api_level,
                               @WebParam(name="DeviceType", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<Byte> device_type,
                               @WebParam(name="UpdateURL", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<String> update_url,
                               @WebParam(name="VendorName", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<String> vendor_name,
                               @WebParam(name="VendorDescription", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<String> vendor_description,
                               @WebParam(name="X509Certificate", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<List<byte[]>> certificatePath,
                               @WebParam(name="SupportedAlgorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<List<String>> supported_algorithms,
                               @WebParam(name="CryptoDataSize", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<Integer> crypto_data_size,
                               @WebParam(name="ExtensionDataSize", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<Integer> extension_data_size,
                               @WebParam(name="DevicePINSupport", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<Boolean> device_pin_support,
                               @WebParam(name="BiometricSupport", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<Boolean> biometric_support,
                               @WebParam(name="ConnectionPort", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<String> connection_port)
    throws SKSException
      {
        log (deviceId, "getDeviceInfo ()");
        try
          {
            DeviceInfo device_info = getDevice (deviceId).getDeviceInfo ();
            api_level.value = device_info.getApiLevel ();
            device_type.value= device_info.getDeviceType ();
            update_url.value = device_info.getUpdateUrl ();
            vendor_name.value = device_info.getVendorName ();
            vendor_description.value = device_info.getVendorDescription ();
            certificatePath.value = new ArrayList<byte[]> ();
            for (X509Certificate cert : device_info.getCertificatePath ())
              {
                certificatePath.value.add (cert.getEncoded ());
              }
            supported_algorithms.value = new ArrayList<String> ();
            for (String alg : device_info.getSupportedAlgorithms ())
              {
                supported_algorithms.value.add (alg);
              }
            crypto_data_size.value = device_info.getCryptoDataSize ();
            extension_data_size.value = device_info.getExtensionDataSize ();
            device_pin_support.value = device_info.getDevicePinSupport ();
            biometric_support.value = device_info.getBiometricSupport ();
            connection_port.value = getConnectionPort (deviceId);
          }
        catch (GeneralSecurityException e)
          {
            throw new SKSException (e);
          }
      }

    @WebMethod(operationName="createProvisioningSession")
    @RequestWrapper(localName="createProvisioningSession", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="createProvisioningSession.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int createProvisioningSession (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          String deviceId,
                                          @WebParam(name="SessionKeyAlgorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          String session_key_algorithm,
                                          @WebParam(name="PrivacyEnabled", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          boolean privacy_enabled,
                                          @WebParam(name="ServerSessionID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          String serverSessionId,
                                          @WebParam(name="ServerEphemeralKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          byte[] server_ephemeral_key,
                                          @WebParam(name="IssuerURI", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          String issuer_uri,
                                          @WebParam(name="KeyManagementKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          byte[] keyManagementKey,
                                          @WebParam(name="ClientTime", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          int clientTime,
                                          @WebParam(name="SessionLifeTime", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          int sessionLifeTime,
                                          @WebParam(name="SessionKeyLimit", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          short sessionKeyLimit,
                                          @WebParam(name="ClientSessionID", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                          Holder<String> clientSessionId,
                                          @WebParam(name="ClientEphemeralKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                          Holder<byte[]> client_ephemeral_key,
                                          @WebParam(name="Attestation", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                          Holder<byte[]> attestation)
    throws SKSException
      {
        String log_result = "";
        try
          {
            ProvisioningSession sess = getDevice (deviceId).createProvisioningSession (session_key_algorithm,
                                                                                        privacy_enabled,
                                                                                        serverSessionId,
                                                                                        getECPublicKey (server_ephemeral_key),
                                                                                        issuer_uri,
                                                                                        keyManagementKey == null ? null : createPublicKeyFromBlob (keyManagementKey),
                                                                                        clientTime,
                                                                                        sessionLifeTime,
                                                                                        sessionKeyLimit);
            clientSessionId.value = sess.getClientSessionId ();
            client_ephemeral_key.value = sess.getClientEphemeralKey ().getEncoded ();
            attestation.value = sess.getAttestation ();
            log_result = " : ProvisioningHandle=" + sess.getProvisioningHandle ();
            return sess.getProvisioningHandle ();
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "createProvisioningSession (IssuerURI=" + issuer_uri + ")" + log_result);
          }
      }

    @WebMethod(operationName="closeProvisioningSession")
    @RequestWrapper(localName="closeProvisioningSession", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="closeProvisioningSession.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="CloseAttestation", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] closeProvisioningSession (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                            String deviceId,
                                            @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                            int provisioning_handle,
                                            @WebParam(name="Nonce", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                            byte[] nonce,
                                            @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                            byte[] mac)
    throws SKSException
      {
        String log_result = "";
        try
          {
            return getDevice (deviceId).closeProvisioningSession (provisioning_handle, nonce, mac);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "closeProvisioningSession (ProvisioningHandle=" + provisioning_handle + ")" + log_result);
          }
      }

    @WebMethod(operationName="enumerateProvisioningSessions")
    @RequestWrapper(localName="enumerateProvisioningSessions", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="enumerateProvisioningSessions.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int enumerateProvisioningSessions (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                              String deviceId,
                                              @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                              int provisioning_handle,
                                              @WebParam(name="ProvisioningState", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                              boolean provisioning_state,
                                              @WebParam(name="SessionKeyAlgorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<String> session_key_algorithm,
                                              @WebParam(name="PrivacyEnabled", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<Boolean> privacy_enabled,
                                              @WebParam(name="KeyManagementKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<byte[]> keyManagementKey,
                                              @WebParam(name="ClientTime", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<Integer> clientTime,
                                              @WebParam(name="SessionLifeTime", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<Integer> sessionLifeTime,
                                              @WebParam(name="ServerSessionID", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<String> serverSessionId,
                                              @WebParam(name="ClientSessionID", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<String> clientSessionId,
                                              @WebParam(name="IssuerURI", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<String> issuer_uri)
    throws SKSException
      {
        String log_result = " : Empty";
        try
          {
            EnumeratedProvisioningSession eps = getDevice (deviceId).enumerateProvisioningSessions (provisioning_handle, provisioning_state);
            if (eps == null)
              {
                eps = new EnumeratedProvisioningSession ();  // Back to square #1
              }
            else
              {
                session_key_algorithm.value = eps.getSessionKeyAlgorithm ();
                privacy_enabled.value = eps.getPrivacyEnabled ();
                keyManagementKey.value = eps.getKeyManagementKey () == null ? null : eps.getKeyManagementKey ().getEncoded ();
                clientTime.value = eps.getClientTime ();
                sessionLifeTime.value = eps.getSessionLifeTime ();
                serverSessionId.value = eps.getServerSessionId ();
                clientSessionId.value = eps.getClientSessionId ();
                issuer_uri.value = eps.getIssuerUri ();
                log_result = " : ProvisioningHandle=" + eps.getProvisioningHandle (); 
              }
            return eps.getProvisioningHandle ();
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "enumerateProvisioningSessions (ProvisioningHandle=" + provisioning_handle + ")" + log_result);
          }
      }

    @WebMethod(operationName="abortProvisioningSession")
    @RequestWrapper(localName="abortProvisioningSession", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="abortProvisioningSession.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void abortProvisioningSession (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          String deviceId,
                                          @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          int provisioning_handle)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).abortProvisioningSession (provisioning_handle);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "abortProvisioningSession (ProvisioningHandle=" + provisioning_handle + ")" + log_result);
          }
      }

    @WebMethod(operationName="signProvisioningSessionData")
    @RequestWrapper(localName="signProvisioningSessionData", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="signProvisioningSessionData.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Signature", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] signProvisioningSessionData (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                               String deviceId,
                                               @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                               int provisioning_handle,
                                               @WebParam(name="Data", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                               byte[] data)
    throws SKSException
      {
        log (deviceId, "signProvisioningSessionData (ProvisioningHandle=" + provisioning_handle + ")");
        return getDevice (deviceId).signProvisioningSessionData (provisioning_handle, data);
      }

    @WebMethod(operationName="createPukPolicy")
    @RequestWrapper(localName="createPukPolicy", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="createPukPolicy.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="PukPolicyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int createPukPolicy (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                String deviceId,
                                @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                int provisioning_handle,
                                @WebParam(name="ID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                String id,
                                @WebParam(name="EncryptedPuk", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte[] encrypted_puk,
                                @WebParam(name="Format", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte format,
                                @WebParam(name="RetryLimit", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                short retryLimit,
                                @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte[] mac)
    throws SKSException
      {
        String log_result = null;
        try
          {
            int puk_policy_handle = getDevice (deviceId).createPukPolicy (provisioning_handle,
                                                                           id,
                                                                           encrypted_puk,
                                                                           format,
                                                                           retryLimit,
                                                                           mac);
            log_result = " : PukPolicyHandle=" + puk_policy_handle;
            return puk_policy_handle;
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "createPukPolicy (ProvisioningHandle=" + provisioning_handle + ", ID=" + id + ")" + log_result);
          }
      }

    @WebMethod(operationName="createPinPolicy")
    @RequestWrapper(localName="createPinPolicy", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="createPinPolicy.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="PINPolicyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int createPinPolicy (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                String deviceId,
                                @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                int provisioning_handle,
                                @WebParam(name="ID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                String id,
                                @WebParam(name="PukPolicyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                int puk_policy_handle,
                                @WebParam(name="UserDefined", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                boolean userDefined,
                                @WebParam(name="UserModifiable", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                boolean userModifiable,
                                @WebParam(name="Format", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte format,
                                @WebParam(name="RetryLimit", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                short retryLimit,
                                @WebParam(name="Grouping", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte grouping,
                                @WebParam(name="PatternRestrictions", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte patternRestrictions,
                                @WebParam(name="MinLength", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                short minLength,
                                @WebParam(name="MaxLength", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                short maxLength,
                                @WebParam(name="InputMethod", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte inputMethod,
                                @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte[] mac)
    throws SKSException
      {
        String log_result = null;
        try
          {
            int pin_policy_handle = getDevice (deviceId).createPinPolicy (provisioning_handle,
                                                                           id,
                                                                           puk_policy_handle,
                                                                           userDefined,
                                                                           userModifiable,
                                                                           format,
                                                                           retryLimit,
                                                                           grouping,
                                                                           patternRestrictions,
                                                                           minLength,
                                                                           maxLength,
                                                                           inputMethod,
                                                                           mac);
            log_result = " : PinPolicyHandle=" + pin_policy_handle;
            return pin_policy_handle;
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "createPinPolicy (ProvisioningHandle=" + provisioning_handle + ", PukPolicyHandle=" + puk_policy_handle + ", ID=" + id + ")" + log_result);
          }
      }

    @WebMethod(operationName="createKeyEntry")
    @RequestWrapper(localName="createKeyEntry", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="createKeyEntry.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int createKeyEntry (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String deviceId,
                               @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               int provisioning_handle,
                               @WebParam(name="ID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String id,
                               @WebParam(name="KeyEntryAlgorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String key_entry_algorithm,
                               @WebParam(name="ServerSeed", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] serverSeed,
                               @WebParam(name="DevicePinProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               boolean devicePinProtection,
                               @WebParam(name="PinPolicyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               int pin_policy_handle,
                               @WebParam(name="PinValue", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] pin_value,
                               @WebParam(name="EnablePinCaching", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               boolean enablePinCaching,
                               @WebParam(name="BiometricProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte biometricProtection,
                               @WebParam(name="ExportProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte exportProtection,
                               @WebParam(name="DeleteProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte deleteProtection,
                               @WebParam(name="AppUsage", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte appUsage,
                               @WebParam(name="FriendlyName", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String friendlyName,
                               @WebParam(name="KeyAlgorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String key_algorithm,
                               @WebParam(name="KeyParameters", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] keyParameters,
                               @WebParam(name="EndorsedAlgorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               List<String> endorsedAlgorithms,
                               @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] mac,
                               @WebParam(name="PublicKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<byte[]> publicKey,
                               @WebParam(name="Attestation", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<byte[]> attestation)
    throws SKSException
      {
        String log_result = null;
        try
          {
            KeyData kd = getDevice (deviceId).createKeyEntry (provisioning_handle,
                                                               id,
                                                               key_entry_algorithm,
                                                               serverSeed,
                                                               devicePinProtection,
                                                               pin_policy_handle,
                                                               pin_value,
                                                               enablePinCaching,
                                                               biometricProtection,
                                                               exportProtection,
                                                               deleteProtection,
                                                               appUsage,
                                                               friendlyName,
                                                               key_algorithm,
                                                               keyParameters,
                                                               endorsedAlgorithms.toArray (new String[0]),
                                                               mac);
            publicKey.value = kd.getPublicKey ().getEncoded ();
            attestation.value = kd.getAttestation ();
            log_result = " : KeyHandle=" + kd.getKeyHandle ();
            return kd.getKeyHandle ();
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "createKeyEntry (ProvisioningHandle=" + provisioning_handle + ", PinPolicyHandle=" + pin_policy_handle + ", ID=" + id + ")" + log_result);
          }
      }

    @WebMethod(operationName="getKeyHandle")
    @RequestWrapper(localName="getKeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="getKeyHandle.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int getKeyHandle (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             String deviceId,
                             @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             int provisioning_handle,
                             @WebParam(name="ID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             String id)
    throws SKSException
      {
        String log_result = null;
        try
          {
            int keyHandle = getDevice (deviceId).getKeyHandle (provisioning_handle, id);
            log_result = " : KeyHandle=" + keyHandle;
            return keyHandle;
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "getKeyHandle (ProvisioningHandle=" + provisioning_handle + ", ID=" + id + ")" + log_result);
          }
      }

    @WebMethod(operationName="setCertificatePath")
    @RequestWrapper(localName="setCertificatePath", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="setCertificatePath.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void setCertificatePath (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                    String deviceId,
                                    @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                    int keyHandle,
                                    @WebParam(name="X509Certificate", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                    List<byte[]> certificatePath,
                                    @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                    byte[] mac)
    throws SKSException
      {
        String log_result = null;
        try
          {
            X509Certificate[] cp = CertificateUtil.getSortedPathFromBlobs (certificatePath);
            getDevice (deviceId).setCertificatePath (keyHandle, cp, mac);
            log_result = " : " + getEndEntityName (cp);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        catch (IOException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw new SKSException (e);
          }
        finally
          {
            log (deviceId, "setCertificatePath (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="importSymmetricKey")
    @RequestWrapper(localName="importSymmetricKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="importSymmetricKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void importSymmetricKey (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                    String deviceId,
                                    @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                    int keyHandle,
                                    @WebParam(name="EncryptedKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                    byte[] encrypted_key,
                                    @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                    byte[] mac)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).importSymmetricKey (keyHandle, encrypted_key, mac);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "importSymmetricKey (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="importPrivateKey")
    @RequestWrapper(localName="importPrivateKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="importPrivateKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void importPrivateKey (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  String deviceId,
                                  @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  int keyHandle,
                                  @WebParam(name="EncryptedKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  byte[] encrypted_key,
                                  @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  byte[] mac)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).importPrivateKey (keyHandle, encrypted_key, mac);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "importPrivateKey (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="addExtension")
    @RequestWrapper(localName="addExtension", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="addExtension.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void addExtension (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              String deviceId,
                              @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              int keyHandle,
                              @WebParam(name="Type", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              String type,
                              @WebParam(name="SubType", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte subType,
                              @WebParam(name="Qualifier", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              String qualifier,
                              @WebParam(name="ExtensionData", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte[] extension_data,
                              @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte[] mac)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).addExtension (keyHandle,
                                                type,
                                                subType,
                                                qualifier,
                                                extension_data,
                                                mac);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "addExtension (KeyHandle=" + keyHandle + ", Type=" + type + ")" + log_result);
          }
      }

    @WebMethod(operationName="postDeleteKey")
    @RequestWrapper(localName="postDeleteKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="postDeleteKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void postDeleteKey (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String deviceId,
                               @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               int provisioning_handle,
                               @WebParam(name="TargetKeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               int target_key_handle,
                               @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] authorization,
                               @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] mac)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).postDeleteKey (provisioning_handle, target_key_handle, authorization, mac);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "postDeleteKey (ProvisioningHandle=" + provisioning_handle + ", TargetKeyHandle=" + target_key_handle + ")" + log_result);
          }
      }

    @WebMethod(operationName="postUnlockKey")
    @RequestWrapper(localName="postUnlockKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="postUnlockKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void postUnlockKey (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String deviceId,
                               @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               int provisioning_handle,
                               @WebParam(name="TargetKeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               int target_key_handle,
                               @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] authorization,
                               @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] mac)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).postUnlockKey (provisioning_handle, target_key_handle, authorization, mac);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "postUnlockKey (ProvisioningHandle=" + provisioning_handle + ", TargetKeyHandle=" + target_key_handle + ")" + log_result);
          }
      }

    @WebMethod(operationName="postUpdateKey")
    @RequestWrapper(localName="postUpdateKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="postUpdateKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void postUpdateKey (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String deviceId,
                               @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               int keyHandle,
                               @WebParam(name="TargetKeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               int target_key_handle,
                               @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] authorization,
                               @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] mac)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).postUpdateKey (keyHandle, target_key_handle, authorization, mac);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "postUpdateKey (KeyHandle=" + keyHandle + ", TargetKeyHandle=" + target_key_handle + ")" + log_result);
          }
      }

    @WebMethod(operationName="postCloneKeyProtection")
    @RequestWrapper(localName="postCloneKeyProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="postCloneKeyProtection.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void postCloneKeyProtection (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        String deviceId,
                                        @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        int keyHandle,
                                        @WebParam(name="TargetKeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        int target_key_handle,
                                        @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        byte[] authorization,
                                        @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        byte[] mac)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).postCloneKeyProtection (keyHandle, target_key_handle, authorization, mac);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "postCloneKeyProtection (KeyHandle=" + keyHandle + ", TargetKeyHandle=" + target_key_handle + ")" + log_result);
          }
      }

    @WebMethod(operationName="enumerateKeys")
    @RequestWrapper(localName="enumerateKeys", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="enumerateKeys.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int enumerateKeys (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              String deviceId,
                              @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              int keyHandle,
                              @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                              Holder<Integer> provisioning_handle)
    throws SKSException
      {
        String log_result = " : Empty";
        try
          {
            EnumeratedKey ek = getDevice (deviceId).enumerateKeys (keyHandle);
            if (ek == null)
              {
                ek = new EnumeratedKey ();  // Back to square #1
              }
            else
              {
                provisioning_handle.value = ek.getProvisioningHandle ();
                log_result = " : KeyHandle=" + ek.getKeyHandle ();
              }
            return ek.getKeyHandle ();
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "enumerateKeys (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="updateKeyManagementKey")
    @RequestWrapper(localName="updateKeyManagementKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="updateKeyManagementKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void updateKeyManagementKey (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        String deviceId,
                                        @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        int provisioning_handle,
                                        @WebParam(name="KeyManagementKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        byte[] keyManagementKey,
                                        @WebParam(name="Attestation", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        byte[] attestation)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).updateKeyManagementKey (provisioning_handle,
                                                          createPublicKeyFromBlob (keyManagementKey),
                                                          attestation);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "updateKeyManagementKey (ProvisioningHandle=" + provisioning_handle + ")" + log_result);
          }
      }

    @WebMethod(operationName="getKeyAttributes")
    @RequestWrapper(localName="getKeyAttributes", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="getKeyAttributes.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void getKeyAttributes (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  String deviceId,
                                  @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  int keyHandle,
                                  @WebParam(name="SymmetricKeyLength", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                  Holder<Short> symmetric_key_length,
                                  @WebParam(name="X509Certificate", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                  Holder<List<byte[]>> certificatePath,
                                  @WebParam(name="AppUsage", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                  Holder<Byte> appUsage,
                                  @WebParam(name="FriendlyName", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                  Holder<String> friendlyName,
                                  @WebParam(name="EndorsedAlgorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                  Holder<List<String>> endorsedAlgorithms,
                                  @WebParam(name="ExtensionType", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                  Holder<List<String>> extension_types)
    throws SKSException
      {
        String log_result = null;
        try
          {
            KeyAttributes ka = getDevice (deviceId).getKeyAttributes (keyHandle);
            symmetric_key_length.value = ka.getSymmetricKeyLength ();
            certificatePath.value = new ArrayList<byte[]> ();
            for (X509Certificate cert : ka.getCertificatePath ())
              {
                certificatePath.value.add (cert.getEncoded ());
              }
            appUsage.value = ka.getAppUsage ().getSksValue ();
            friendlyName.value = ka.getFriendlyName ();
            endorsedAlgorithms.value = new ArrayList<String> ();
            for (String alg :   ka.getEndorsedAlgorithms ())
              {
                endorsedAlgorithms.value.add (alg);
              }
            extension_types.value = new ArrayList<String> ();
            for (String type :  ka.getExtensionTypes ())
              {
                extension_types.value.add (type);
              }
            log_result = " : " + getEndEntityName (ka.getCertificatePath ());
          }
        catch (GeneralSecurityException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw new SKSException (e);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "getKeyAttributes (KeyHandle=" + keyHandle + ")" + log_result);
          }
       }

    @WebMethod(operationName="getKeyProtectionInfo")
    @RequestWrapper(localName="getKeyProtectionInfo", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="getKeyProtectionInfo.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void getKeyProtectionInfo (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                      String deviceId,
                                      @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                      int keyHandle,
                                      @WebParam(name="ProtectionStatus", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> protectionStatus,
                                      @WebParam(name="PukFormat", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> puk_format,
                                      @WebParam(name="PukRetryLimit", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Short> puk_retry_limit,
                                      @WebParam(name="PukErrorCount", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Short> puk_error_count,
                                      @WebParam(name="UserDefined", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Boolean> userDefined,
                                      @WebParam(name="UserModifiable", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Boolean> userModifiable,
                                      @WebParam(name="Format", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> format,
                                      @WebParam(name="RetryLimit", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Short> retryLimit,
                                      @WebParam(name="Grouping", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> grouping,
                                      @WebParam(name="PatternRestrictions", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> patternRestrictions,
                                      @WebParam(name="MinLength", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Short> minLength,
                                      @WebParam(name="MaxLength", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Short> maxLength,
                                      @WebParam(name="InputMethod", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> inputMethod,
                                      @WebParam(name="PinErrorCount", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Short> pin_error_count,
                                      @WebParam(name="EnablePinCaching", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Boolean> enablePinCaching,
                                      @WebParam(name="BiometricProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> biometricProtection,
                                      @WebParam(name="ExportProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> exportProtection,
                                      @WebParam(name="DeleteProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> deleteProtection,
                                      @WebParam(name="KeyBackup", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> key_backup)
    throws SKSException
      {
        String log_result = "";
        try
          {
            KeyProtectionInfo kpi      = getDevice (deviceId).getKeyProtectionInfo (keyHandle);
            protectionStatus.value    = kpi.getSKSProtectionStatus ();
            if (kpi.hasLocalPukProtection ())
              {
                puk_format.value           = kpi.getPukFormat ().getSksValue ();
                puk_retry_limit.value      = kpi.getPukRetryLimit ();
                puk_error_count.value      = kpi.getPukErrorCount ();
              }
            else
              {
                puk_format.value           = (byte)0;
                puk_retry_limit.value      = (short)0;
                puk_error_count.value      = (short)0;
              }
            if (kpi.hasLocalPinProtection ())
              {
                userDefined.value         = kpi.getPinUserDefinedFlag ();
                userModifiable.value      = kpi.getPinUserModifiableFlag ();
                format.value               = kpi.getPinFormat ().getSksValue ();
                retryLimit.value          = kpi.getPinRetryLimit ();
                grouping.value             = kpi.getPinGrouping ().getSksValue ();
                patternRestrictions.value = PatternRestriction.getSksValue (kpi.getPatternRestrictions ());
                minLength.value           = kpi.getPinMinLength ();
                maxLength.value           = kpi.getPinMaxLength ();
                inputMethod.value         = kpi.getPinInputMethod ().getSksValue ();
                pin_error_count.value      = kpi.getPinErrorCount ();
              }
            else
              {
                userDefined.value         = false;
                userModifiable.value      = false;
                format.value               = (byte)0;
                retryLimit.value          = (short)0;
                grouping.value             = (byte)0;
                patternRestrictions.value = (byte)0;
                minLength.value           = (short)0;
                maxLength.value           = (short)0;
                inputMethod.value         = (byte)0;
                pin_error_count.value      = (short)0;
              }
            enablePinCaching.value   = kpi.getEnablePinCachingFlag ();
            biometricProtection.value = kpi.getBiometricProtection ().getSksValue ();
            exportProtection.value    = kpi.getExportProtection ().getSksValue ();
            deleteProtection.value    = kpi.getDeleteProtection ().getSksValue ();
            key_backup.value           = kpi.getKeyBackup ();
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "getKeyProtectionInfo (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="getExtension")
    @RequestWrapper(localName="getExtension", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="getExtension.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void getExtension (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              String deviceId,
                              @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              int keyHandle,
                              @WebParam(name="Type", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              String type,
                              @WebParam(name="SubType", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                              Holder<Byte> subType,
                              @WebParam(name="Qualifier", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                              Holder<String> qualifier,
                              @WebParam(name="ExtensionData", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                              Holder<byte[]> extension_data)
    throws SKSException
      {
        String log_result = "";
        try
          {
            Extension ext = getDevice (deviceId).getExtension (keyHandle, type);
            subType.value       = ext.getSubType ();
            qualifier.value      = ext.getQualifier ();
            extension_data.value = ext.getExtensionData ();
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "getExtension (KeyHandle=" + keyHandle + ", Type=" + type + ")" + log_result);
          }
      }

    @WebMethod(operationName="setProperty")
    @RequestWrapper(localName="setProperty", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="setProperty.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void setProperty (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             String deviceId,
                             @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             int keyHandle,
                             @WebParam(name="Type", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             String type,
                             @WebParam(name="Name", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             String name,
                             @WebParam(name="Value", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             String value)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).setProperty (keyHandle, type, name, value);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "setProperty (KeyHandle=" + keyHandle + ", Type=" + type + ")" + log_result);
          }
      }

    @WebMethod(operationName="deleteKey")
    @RequestWrapper(localName="deleteKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="deleteKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void deleteKey (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           String deviceId,
                           @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           int keyHandle,
                           @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           byte[] authorization)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).deleteKey (keyHandle, authorization);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "deleteKey (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="exportKey")
    @RequestWrapper(localName="exportKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="exportKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Key", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] exportKey (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             String deviceId,
                             @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             int keyHandle,
                             @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             byte[] authorization)
    throws SKSException
      {
        String log_result = "";
        try
          {
            return getDevice (deviceId).exportKey (keyHandle, authorization);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "exportKey (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="unlockKey")
    @RequestWrapper(localName="unlockKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="unlockKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void unlockKey (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           String deviceId,
                           @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           int keyHandle,
                           @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           byte[] authorization)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).unlockKey (keyHandle, authorization);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "unlockKey (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="changePin")
    @RequestWrapper(localName="changePin", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="changePin.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void changePin (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           String deviceId,
                           @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           int keyHandle,
                           @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           byte[] authorization,
                           @WebParam(name="NewPin", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           byte[] new_pin)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).changePin (keyHandle, authorization, new_pin);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "changePin (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="setPin")
    @RequestWrapper(localName="setPin", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="setPin.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void setPin (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                        String deviceId,
                        @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                        int keyHandle,
                        @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                        byte[] authorization,
                        @WebParam(name="NewPin", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                        byte[] new_pin)
    throws SKSException
      {
        String log_result = "";
        try
          {
            getDevice (deviceId).setPin (keyHandle, authorization, new_pin);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "setPin (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="signHashedData")
    @RequestWrapper(localName="signHashedData", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="signHashedData.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Result", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] signHashedData (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  String deviceId,
                                  @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  int keyHandle,
                                  @WebParam(name="Algorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  String algorithm,
                                  @WebParam(name="Parameters", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  byte[] parameters,
                                  @WebParam(name="TrustedGUIAuthorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  boolean trusted_gui_authorization,
                                  @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  byte[] authorization,
                                  @WebParam(name="Data", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  byte[] data)
    throws SKSException
      {
        authorization = checkAuthorization (deviceId,
                                            trusted_gui_authorization,
                                            keyHandle,
                                            authorization);
        String log_result = "";
        try
          {
            return getDevice (deviceId).signHashedData (keyHandle,
                                                         algorithm,
                                                         parameters,
                                                         authorization,
                                                         data);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "signHashedData (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="asymmetricKeyDecrypt")
    @RequestWrapper(localName="asymmetricKeyDecrypt", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="asymmetricKeyDecrypt.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Result", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] asymmetricKeyDecrypt (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        String deviceId,
                                        @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        int keyHandle,
                                        @WebParam(name="Algorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        String algorithm,
                                        @WebParam(name="Parameters", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        byte[] parameters,
                                        @WebParam(name="TrustedGUIAuthorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        boolean trusted_gui_authorization,
                                        @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        byte[] authorization,
                                        @WebParam(name="Data", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        byte[] data)
    throws SKSException
      {
        authorization = checkAuthorization (deviceId,
                                            trusted_gui_authorization,
                                            keyHandle,
                                            authorization);
        String log_result = "";
        try
          {
            return getDevice (deviceId).asymmetricKeyDecrypt (keyHandle, 
                                                               algorithm,
                                                               parameters,
                                                               authorization, 
                                                               data);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "asymmetricKeyDecrypt (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="keyAgreement")
    @RequestWrapper(localName="keyAgreement", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="keyAgreement.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Result", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] keyAgreement (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                String deviceId,
                                @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                int keyHandle,
                                @WebParam(name="Algorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                String algorithm,
                                @WebParam(name="Parameters", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte[] parameters,
                                @WebParam(name="TrustedGUIAuthorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                boolean trusted_gui_authorization,
                                @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte[] authorization,
                                @WebParam(name="PublicKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte[] publicKey)
    throws SKSException
      {
        authorization = checkAuthorization (deviceId,
                                            trusted_gui_authorization,
                                            keyHandle,
                                            authorization);
        String log_result = "";
        try
          {
            return getDevice (deviceId).keyAgreement (keyHandle, 
                                                       algorithm, 
                                                       parameters, 
                                                       authorization, 
                                                       getECPublicKey (publicKey));
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "keyAgreement (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="performHmac")
    @RequestWrapper(localName="performHmac", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="performHmac.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Result", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] performHmac (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String deviceId,
                               @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               int keyHandle,
                               @WebParam(name="Algorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String algorithm,
                               @WebParam(name="Parameters", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] parameters,
                               @WebParam(name="TrustedGUIAuthorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               boolean trusted_gui_authorization,
                               @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] authorization,
                               @WebParam(name="Data", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] data)
    throws SKSException
      {
        authorization = checkAuthorization (deviceId,
                                            trusted_gui_authorization,
                                            keyHandle,
                                            authorization);
        String log_result = "";
        try
          {
            return getDevice (deviceId).performHmac (keyHandle, 
                                                      algorithm,
                                                      parameters,
                                                      authorization,
                                                      data);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "performHMAC (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="symmetricKeyEncrypt")
    @RequestWrapper(localName="symmetricKeyEncrypt", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="symmetricKeyEncrypt.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Result", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] symmetricKeyEncrypt (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       String deviceId,
                                       @WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       int keyHandle,
                                       @WebParam(name="Algorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       String algorithm,
                                       @WebParam(name="Mode", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       boolean mode,
                                       @WebParam(name="Parameters", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       byte[] parameters,
                                       @WebParam(name="TrustedGUIAuthorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       boolean trusted_gui_authorization,
                                       @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       byte[] authorization,
                                       @WebParam(name="Data", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       byte[] data)
    throws SKSException
      {
        authorization = checkAuthorization (deviceId,
                                            trusted_gui_authorization,
                                            keyHandle,
                                            authorization);
        String log_result = "";
        try
          {
            return getDevice (deviceId).symmetricKeyEncrypt (keyHandle, 
                                                              algorithm,
                                                              mode,
                                                              parameters,
                                                              authorization,
                                                              data);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "symmetricKeyEncrypt (KeyHandle=" + keyHandle + ")" + log_result);
          }
      }

    @WebMethod(operationName="updateFirmware")
    @RequestWrapper(localName="updateFirmware", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="updateFirmware.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="NextURL", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public String updateFirmware (@WebParam(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  String deviceId,
                                  @WebParam(name="Chunk", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  byte[] chunk)
    throws SKSException
      {
        String log_result = "";
        try
          {
            return getDevice (deviceId).updateFirmware (chunk);
          }
        catch (SKSException e)
          {
            log_result = " Exception: " + e.getMessage ();
            throw e;
          }
        finally
          {
            log (deviceId, "updateFirmware (Chunk.length=" + chunk.length + ")" + log_result);
          }
      }

    @WebMethod(operationName="listDevices")
    @RequestWrapper(localName="listDevices", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="listDevices.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="DeviceID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public List<String> listDevices ()
    throws SKSException
      {
        List<String> device_list = new ArrayList<String> ();
        for (String device : devices.keySet ())
          {
             device_list.add (device);
          }
        return device_list;
      }

    @WebMethod(operationName="getVersion")
    @RequestWrapper(localName="getVersion", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="getVersion.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Version", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public String getVersion ()
      {
        return "1.0";
      }

    @WebMethod(operationName="logEvent")
    @RequestWrapper(localName="logEvent", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="logEvent.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void logEvent (@WebParam(name="Description", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                          String description)
      {
        log ("logEvent (Description=" + description + ")");
      }

    public static void main (String[] args)
      {
        if (args.length != 1)
          {
            System.out.println ("Missing URL");
          }
        Endpoint endpoint = Endpoint.create (new SKSWSImplementation ());
        endpoint.publish (args[0]);
      }
  }
