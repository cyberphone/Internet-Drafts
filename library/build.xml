<project name="WEBPKI.ORG library" default="help" basedir=".">

  <!-- set global properties for this build -->
  <property name="sks.implementation" value="org.webpki.sks.SKSReferenceImplementation"/>
  <property name="sks.debug" value="true"/>
  <property name="src_dir" value="src"/>
  <property name="src_generators" value="generators"/>
  <property name="src_test" value="test"/>
  <property name="dot_net_dir" value="sks-ws-dotnet"/>
  <property name="cpp_dir" value="sks-ws-cpp"/>
  <property name="temp_dir" value=".tmp"/>
  <property name="test_dir" value="test"/>
  <property name="android_dir" value="${temp_dir}/src/main/java"/>
  <property name="android_test_dir" value="${temp_dir}/src/androidTest/java"/>
  <property name="testout.dir" location="testout"/>
  <property name="dist_dir"  value="dist"/>
  <property name="bin_dir" value="bin"/>
  <property name="spts_dir"  value="securityproxy-test"/>
  <property name="ext.jar"  value="../resources/third-party-jars"/>
  <property name="testdata_dir" location="../testdata"/>
  <property name="android-saturn" value="android.saturn"/>
  <property name="android-json" value="android.json"/>
  <property name="webpki-libext" value="webpki.org-libext-1.00.jar"/>
  <property name="webpki-webutil" value="webpki.org-webutil-1.00.jar"/>
  <property name="debug"  value="on"/>
  <property name="javadoccss" location="stylesheet.css"/>
  <property name="bcprovider" value=""/>
  <property environment="env"/>

  <property name="javaversion" value="${ant.java.version}"/>
  <condition property="tested.version" else="false">
    <equals arg1="11" arg2="${javaversion}"/>
  </condition>

  <!-- Register the jpp ant task -->
  <taskdef resource="jpp.xml" classpath="../resources/third-party-jars/jpp-1.0.3.jar" />
	
  <target name="_jdk11" unless="${tested.version}">
  	<echo message="&#10;
***************************************************************&#10;
  	WARNING - This package has only been tested with Java 11!&#10;
***************************************************************&#10;&#10;"/>
  </target>

  <path id="compile.classpath">
	 <fileset dir="${ext.jar}">
	   <include name="*.jar"/>
     </fileset>
  </path>

  <condition property="junit.exclude" value="bc*.*" else="nosuchfile.jar">
     <isset property="jceonly"/>
  </condition>

  <path id="junit.classpath">
    <fileset dir="${dist_dir}">
	   <include name="${webpki-libext}"/>
    </fileset>
	 <fileset dir="${ext.jar}">
        <include name="*.jar"/>
        <exclude name="${junit.exclude}"/>
	 </fileset>
  </path>

  <property environment="env"/>
  <condition property="catalina.home" value="${env.CATALINA_HOME}">
    <isset property="env.CATALINA_HOME"/>
  </condition>

  <target name="help">
    <echo message="Targets: help build tomcat doc testkeygen2 testsks testjson android-json android-saturn"/>
  </target>
	
  <target name="build">
  	<antcall target="_jdk11"/>
  	
    <delete dir="${temp_dir}"/>
    <delete dir="${dist_dir}"/>
  	
    <fixcrlf srcdir="."
       tab="remove"
       tablength="4"
       eol="lf"
       eof="remove"
       includes="**/*.java, **/*.xsd"/>
 
    <jpp destdir="${test_dir}" verbose="true">
        <fileset dir="ppmastertest" includes="**/*.java" />
    </jpp>
    <replace file="${test_dir}/org/webpki/sks/SKSReferenceImplementation.java">
      <replacefilter token="MACRO_GET_PRIVATEKEY" value="privateKey"/>
      <replacefilter token="MACRO_IMPORTED_PRIVATEKEY" value="keyEntry.privateKey"/>
    </replace>  
  	
    <mkdir dir="${temp_dir}"/>
 	<!-- Copy all files except .java and doc-related -->
    <copy todir="${temp_dir}" preservelastmodified="true" includeEmptyDirs="false">
      <fileset dir="${src_dir}">
        <include name="**/*"/>
        <exclude name="**/*.java"/>
        <exclude name="**/package.html"/>
        <exclude name="**/doc-files/*"/>
      </fileset>
      <fileset dir="${src_test}">
        <include name="**/*"/>
        <exclude name="**/*.java"/>
        <exclude name="**/package.html"/>
        <exclude name="**/doc-files/*"/>
      </fileset>
    </copy>

    <!-- Compile java code from ${src_dir} into ${temp_dir} -->
    <javac debug="${debug}"
    	   srcdir="${src_dir}:${src_test}"
    	   destdir="${temp_dir}" 
    	   classpathref="compile.classpath"
    	   includeAntRuntime="false">
       <compilerarg value="-Xlint:all,-rawtypes,-path"/>
    </javac>
  	
    <!-- Create the distribution directory -->
    <mkdir dir="${dist_dir}"/>

    <!-- Put everything from ${temp_dir} into jar files -->
    <jar jarfile="${dist_dir}/${webpki-libext}">
      <fileset dir="${temp_dir}">
        <exclude name="org/webpki/webutil/**"/>
      </fileset>
    </jar>

  	<jar jarfile="${dist_dir}/${webpki-webutil}">
      <fileset dir="${temp_dir}">
        <include name="org/webpki/webutil/**"/>
      </fileset>
    </jar>

  	<!-- Compile generators just to check that they are still in concert with the code -->
    <javac debug="${debug}"
           srcdir="${src_generators}"
           destdir="${temp_dir}" 
           classpathref="compile.classpath"
           includeAntRuntime="false">
       <compilerarg value="-Xlint:all,-path"/>
    </javac>

  </target>

  <target name="tomcat">
    <fail message="CATALINA_HOME must be set to environment!" unless="catalina.home"/>
    <antcall target="build"/>
    <copy todir="${catalina.home}/lib" overwrite="true" preservelastmodified="true">
      <fileset dir="${dist_dir}">
        <include name="${webpki-libext}"/>
        <include name="${webpki-webutil}"/>
      </fileset>
    </copy>
  </target>

  <target name="_setdoc_dir" unless="github.doc.present">
  	<echo message="Local docs"/>
    <mkdir dir="${public_doc_dir}"/>
    <mkdir dir="${doc_dir}"/>
  </target>

  <target name="doc">
   	<available file="../../../github.repositories/doc/openkeystore/javaapi" type="dir" property="github.doc.present"/>
  	<condition property="doc_root" value="../../" else="">
      <isset property="github.doc.present"/>
  	</condition>
    <property name="public_doc_dir" location="${doc_root}doc/security"/>
    <property name="doc_dir" location="${doc_root}doc/openkeystore/javaapi"/>
  	<antcall target="_setdoc_dir"/>
  	
  	<!-- Create temp directory -->
    <delete dir="${temp_dir}"/>
    <mkdir dir="${temp_dir}"/>

  	<!-- Copy all files  -->
    <copy todir="${temp_dir}">
      <fileset dir="${src_dir}"/>
  	</copy>

  	<!-- Make documentation -->
	<!--  -Xdoclint:none: https://github.com/AdoptOpenJDK/openjdk-support/issues/131 -->
    <javadoc destdir="${doc_dir}"
    	     overview="${temp_dir}/overview.html"
    	     stylesheetfile="${javadoccss}"
             author="true"
             version="true"
             Package="false"
             Use="false"
    	     additionalparam="--allow-script-in-comments -Xdoclint:none"
             nodeprecated="true"
             nodeprecatedlist="true"
             classpathref="compile.classpath"
             windowtitle="WebPKI.org Support">
      <packageset dir="${temp_dir}">
        <include name="org/**"/>
        <exclude name="org/**/c14n/**"/>
        <exclude name="org/**/webutil/locale/**"/>
        <exclude name="org/**/webutil/certview/**"/>
        <exclude name="org/**/webutil/xmlview/**"/>
      </packageset>
      <link offline="false" href="https://docs.oracle.com/en/java/javase/11/docs/api/"/>
      <link offline="false" href="https://javaee.github.io/javaee-spec/javadocs/"/>
      <doctitle><![CDATA[<h1>WebPKI.org Support</h1>]]></doctitle>
      <bottom><![CDATA[<i>2005-2020 WebPKI.org.</i>]]></bottom>
    </javadoc>
    <delete dir="${doc_dir}">
      <include name="*.zip"/>
    </delete>
  	<replaceregexp
        match="&lt;\!\-\-\ Generated\ by\ javadoc.+\-\-&gt;"
        replace=""
        flags="m">
  	    <fileset dir="${doc_dir}" includes="**/*.html"/>
  	</replaceregexp>
  	<replaceregexp
        match="&lt;meta\ name=.+&gt;"
        replace=""
        flags="m">
  	    <fileset dir="${doc_dir}" includes="**/*.html"/>
  	</replaceregexp>
  	<!-- Windows... -->
    <fixcrlf srcdir="${doc_dir}"
       eol="lf"
       includes="**/*.html, **/*.js, **/*.css, element-list"/>
  	<!-- HTML Doc task for KeyGen2 -->
    <antcall target="_java2html">
       <param name="doc.class" value="org.webpki.keygen2.KeyGen2HTMLReference"/>
       <param name="doc.file" value="${public_doc_dir}/keygen2.html"/>
       <param name="file.base1" value=""/>
       <param name="file.base2" value=""/>
       <param name="file.base3" value=""/>
     </antcall>
     <!-- HTML Doc task for JSF -->
     <antcall target="_java2html">
       <param name="doc.class" value="org.webpki.json.JSONSignatureHTMLReference"/>
       <param name="doc.file" value="${public_doc_dir}/jsf.html"/>
       <param name="file.base1" value="${testdata_dir}/keys"/>
       <param name="file.base2" value="${testdata_dir}/signatures"/>
       <param name="file.base3" value="${testdata_dir}/data"/>
     </antcall>
     <!-- HTML Doc task for JEF -->
     <antcall target="_java2html">
       <param name="doc.class" value="org.webpki.json.JSONEncryptionHTMLReference"/>
       <param name="doc.file" value="${public_doc_dir}/jef.html"/>
       <param name="file.base1" value="${testdata_dir}/keys"/>
       <param name="file.base2" value="${testdata_dir}/encryption"/>
       <param name="file.base3" value="${testdata_dir}/data"/>
     </antcall>
  </target>

  <target name="_clean_android">
    <replaceregexp file="${android_dir}/org/webpki/json/NumberToJSON.java"
        match="ValueExact"
        replace="Value"
        flags="g"/>
  	
    <replace file="${android_dir}/org/webpki/json/EncryptionCore.java">
      <replacefilter token="import java.security.spec.MGF1ParameterSpec;&#10;" value=""/>
      <replacefilter token="import javax.crypto.spec.OAEPParameterSpec;&#10;" value=""/>
      <replacefilter token="import javax.crypto.spec.PSource;&#10;" value=""/>
    </replace>  

  	<replaceregexp file="${android_dir}/org/webpki/json/EncryptionCore.java"
        match="(\n)(.*\n.*\n.*PSpecified.*\n.*\n\ \ \ \ )(.*\n)(.*\n)"
        replace="\1\3"/>

  </target>

  <target name="android-json">    
    <delete file="${dist_dir}/${android-json}.zip"/>
    <delete dir="${temp_dir}"/>
    <delete dir="${bin_dir}"/>
    <mkdir dir="${temp_dir}"/>
    <mkdir dir="${bin_dir}"/>

    <copy todir="${android_dir}/org/webpki" preservelastmodified="true">
      <fileset dir="${src_dir}/org/webpki">
        <include name="**/util/ISODateTime.java"/>
        <include name="**/util/ArrayUtil.java"/>
        <include name="**/util/Base64URL.java"/>
        <include name="**/crypto/VerifierInterface.java"/>
        <include name="**/crypto/SymKeyVerifierInterface.java"/>
        <include name="**/crypto/SignerInterface.java"/>
        <include name="**/crypto/AsymKeySignerInterface.java"/>
        <include name="**/crypto/SymKeySignerInterface.java"/>
        <include name="**/crypto/CertificateUtil.java"/>
        <include name="**/crypto/CryptoAlgorithms.java"/>
        <include name="**/crypto/KeyAlgorithms.java"/>
        <include name="**/crypto/MACAlgorithms.java"/>
        <include name="**/crypto/HashAlgorithms.java"/>
        <include name="**/crypto/SignatureAlgorithms.java"/>
        <include name="**/crypto/AlgorithmPreferences.java"/>
        <include name="**/crypto/AsymSignatureAlgorithms.java"/>
        <include name="**/crypto/SymSignatureAlgorithms.java"/>
        <include name="**/crypto/SignatureWrapper.java"/>
        <include name="**/crypto/CryptoRandom.java"/>
        <include name="**/json/*.java"/>
      </fileset>
    </copy>

    <replaceregexp file="${android_dir}/org/webpki/crypto/CertificateUtil.java"
        match="\/\/ ANDROID_START.+?\/\/ ANDROID_END"
        replace=""
        flags="gs"/>

  	<antcall target="_clean_android"/>
  	
  	<javac debug="${debug}" srcdir="${android_dir}" destdir="${bin_dir}" includeAntRuntime="false"/>
  	
  	<!-- Create Android JSON java library -->
    <zip destfile="${dist_dir}/${android-json}.zip">
      <zipfileset dir="${temp_dir}">
          <include name="**/*.java"/>
       </zipfileset>
    </zip>
    <delete dir="${temp_dir}"/>
    <delete dir="${bin_dir}"/>
  </target>
		
  <target name="android-saturn">    
    <delete file="${dist_dir}/${android-saturn}.zip"/>
    <delete dir="${temp_dir}"/>
    <delete dir="${bin_dir}"/>
    <mkdir dir="${temp_dir}"/>
    <mkdir dir="${bin_dir}"/>

    <copy todir="${android_dir}/org/webpki" preservelastmodified="true">
      <fileset dir="${src_dir}/org/webpki">
        <exclude name="**/tools/**"/>
        <exclude name="**/xml/**"/>
        <exclude name="**/crypto/**"/>
        <exclude name="**/jose/**"/>
        <exclude name="**/util/**"/>
        <exclude name="**/xmldsig/**"/>
        <exclude name="**/xmlenc/**"/>
        <exclude name="**/pdf/**"/>
        <exclude name="**/pkcs7/**"/>
        <exclude name="**/securityproxy/**"/>
        <exclude name="**/ca/**"/>
        <exclude name="**/webutil/**"/>
        <exclude name="**/keygen2/*RequestEncoder.java"/>
        <exclude name="**/keygen2/*ResponseDecoder.java"/>
        <exclude name="**/keygen2/ServerState.java"/>
        <exclude name="**/keygen2/ServerEncoder.java"/>
        <exclude name="**/keygen2/ServerCryptoInterface.java"/>
        <exclude name="**/webauth/*RequestEncoder.java"/>
        <exclude name="**/webauth/*ResponseDecoder.java"/>
      </fileset>
      <fileset dir="${src_dir}/org/webpki">
        <include name="**/util/ISODateTime.java"/>
        <include name="**/util/DebugFormatter.java"/>
        <include name="**/util/ArrayUtil.java"/>
        <include name="**/util/StringUtil.java"/>
        <include name="**/util/Base64URL.java"/>
        <include name="**/util/Base64.java"/>
        <include name="**/util/HTMLEncoder.java"/>
        <include name="**/crypto/KeyStoreReader.java"/>
        <include name="**/crypto/KeyContainerTypes.java"/>
        <include name="**/crypto/CertificateFilter.java"/>
        <include name="**/crypto/CertificateUtil.java"/>
        <include name="**/crypto/CertificateInfo.java"/>
        <include name="**/crypto/CertificateExtensions.java"/>
        <include name="**/crypto/ExtendedKeyUsages.java"/>
        <include name="**/crypto/DeviceID.java"/>
        <include name="**/crypto/KeyUsageBits.java"/>
        <include name="**/crypto/VerifierInterface.java"/>
        <include name="**/crypto/SymKeyVerifierInterface.java"/>
        <include name="**/crypto/SignerInterface.java"/>
        <include name="**/crypto/AsymKeySignerInterface.java"/>
        <include name="**/crypto/SymKeySignerInterface.java"/>
        <include name="**/crypto/CryptoAlgorithms.java"/>
        <include name="**/crypto/KeyAlgorithms.java"/>
        <include name="**/crypto/MACAlgorithms.java"/>
        <include name="**/crypto/HashAlgorithms.java"/>
        <include name="**/crypto/SignatureAlgorithms.java"/>
        <include name="**/crypto/AlgorithmPreferences.java"/>
        <include name="**/crypto/AsymSignatureAlgorithms.java"/>
        <include name="**/crypto/SymSignatureAlgorithms.java"/>
        <include name="**/crypto/SignatureWrapper.java"/>
        <include name="**/crypto/CryptoRandom.java"/>
      </fileset>
      </copy>

    <replaceregexp file="${android_dir}/org/webpki/crypto/KeyStoreReader.java"
        match="(\/\/\ JKS\ magic\ number\ \+\ version\ \(2\).*)(byte\[\]\ jks\ \=\ \{)(\(byte\)0xfe,\ \(byte\)0xed,\ \(byte\)0xfe,\ \(byte\)0xed,\ 0,\ 0,\ 0,\ 2)(\}\;)"
        replace="\20, 0, 0, 1, 0, 0, 0, 20\4 // BKS: (int)VERSION + (int)SALT_LENGTH"
        flags="s"/>

  	<!-- No need for decorated OIDs in Android -->
    <replaceregexp file="${android_dir}/org/webpki/asn1/ASN1ObjectID.java"
        match="(public\ static\ void\ tryReadOIDNames.+\{)(.+)(\n.+Hashtable)"
        replace="\1 \3"
        flags="s"/>

  	<replaceregexp file="${android_dir}/org/webpki/asn1/ASN1ObjectID.java"
        match="(no\ =\ new\ Hashtable&lt;&gt;\(\);)(.+)(\n.+oidToName)"
        replace="\1 \3"
        flags="s"/>

  	<replaceregexp
        match="&quot;SunX509&quot;"
        replace="&quot;X509&quot;"
        flags="g">
        <fileset dir="${android_dir}/org/webpki/">
          <include name="**/*.java"/>
        </fileset>
    </replaceregexp>
    
    <replaceregexp
        match="&quot;JKS&quot;"
        replace="&quot;BKS&quot;"
        flags="g">
        <fileset dir="${android_dir}/org/webpki/">
          <include name="**/*.java"/>
        </fileset>
    </replaceregexp>

  	<antcall target="_clean_android"/>
   	
  	<property name="ANDROID" value="true"/>
    <jpp destdir="${android_dir}" verbose="true">
        <fileset dir="ppmastertest" includes="**/*.java" />
    </jpp>
    <replace file="${android_dir}/org/webpki/sks/SKSReferenceImplementation.java">
      <replacefilter token="MACRO_GET_PRIVATEKEY" value="getPrivateKey()"/>
      <replacefilter token="MACRO_IMPORTED_PRIVATEKEY" value="importedPrivateKey"/>
    </replace>  
  	<move file="${android_dir}/org/webpki/sks/SKSReferenceImplementation.java" tofile="${android_dir}/org/webpki/mobile/android/sks/AndroidSKSImplementation.java"/>
 	<move file="${android_dir}/org/webpki/sks/SKSTest.java" todir="${android_test_dir}/org/webpki/sks"/>
  	<copy todir="${android_test_dir}/org/webpki/sks">
  		<fileset dir="${test_dir}/org/webpki/sks">
  	       <exclude name="SKSReferenceImplementation.java"/>
   	       <exclude name="ASN1.java"/>
   	       <exclude name="PKCS12Import.java"/>
   	       <exclude name="DemoTrustedGUIAuthorization.java"/>
   	       <exclude name="DummyTrustedGUIAuthorization.java"/>
   	       <exclude name="Random.java"/>
   	       <exclude name="*.jks"/>
   	       <exclude name="**/twolayer/**"/>
  		</fileset>
  	</copy>
  	<copy todir="${android_test_dir}">
  		<fileset dir="${src_dir}">
  	       <include name="**/AsymEncryptionAlgorithms.java"/>
  	       <include name="**/SymEncryptionAlgorithms.java"/>
   	       <include name="**/EncryptionAlgorithms.java"/>
   	       <include name="**/CA.java"/>
   	       <include name="**/CertSpec.java"/>
  		</fileset>
  	</copy>
  	<copy todir="${android_dir}">
  		<fileset dir="androidsrc" includes="**/*.java"/>
  	</copy>
    <replaceregexp file="${android_dir}/org/webpki/mobile/android/sks/HardwareKeyStore.java"
        match="\.setAttestationChallenge.*\)\)"
        replace="/* REMOVED */"
        flags=""/>    
  	<javac debug="${debug}" 
  		   srcdir="${android_dir}:androidrefsrc:${android_test_dir}"
  		   destdir="${bin_dir}"
  		   includeAntRuntime="false"
  	       classpath="${ext.jar}/junit-4.12.jar"/>

  	<copy todir="${android_dir}" overwrite="true">
  		<fileset dir="androidsrc" includes="**/HardwareKeyStore.java"/>
  	</copy>

  	<!-- Create Android java library -->
    <zip destfile="${dist_dir}/${android-saturn}.zip">
      <zipfileset dir="${temp_dir}">
          <include name="**/*.java"/>
       </zipfileset>
    </zip>
    <delete dir="${temp_dir}"/>
    <delete dir="${bin_dir}"/>
  </target>
	
  <target name="_test">
  	<property name="sks.standalone" value="true"/>
    <mkdir dir="${testout.dir}"/>
    <junit fork="no" haltonfailure="yes" tempdir="${testout.dir}">
      <test name="${test.class}" unless="method"/>
      <test name="${test.class}" methods="${method}" if="method"/><!-- ANT 1.8.2 and up -->
    	<sysproperty key="sks.implementation" value="${sks.implementation}"/>
    	<sysproperty key="testout.dir" value="${testout.dir}"/>
    	<sysproperty key="sks.standalone" value="${sks.standalone}"/>
      	<sysproperty key="sks.referenceimplementation" value="${sks.referenceimplementation}"/>
       	<sysproperty key="bcprovider" value="${bcprovider}"/>
    	<sysproperty key="json.keys" value="${testdata_dir}/keys"/>
    	<sysproperty key="json.data" value="${testdata_dir}/data"/>
    	<sysproperty key="json.encryption" value="${testdata_dir}/encryption"/>
    	<sysproperty key="json.signatures" value="${testdata_dir}/signatures"/>
      <formatter type="plain" usefile="false"/>
      <classpath refid="junit.classpath"/>
    </junit>
  </target>

  <!-- JUnit test of the KeyGen2 protocol and the SKS API -->
  <target name="testkeygen2">
    <antcall target="_test">
       <param name="test.class" value="org.webpki.keygen2.KeyGen2Test"/>
     </antcall>
  </target>
  
  <!-- JUnit test of the SKS API -->
  <target name="testsks">
    <antcall target="_test">
       <param name="test.class" value="org.webpki.sks.SKSTest"/>
     </antcall>
  </target>

  <!-- JUnit test of the JSON API.  The extra parameters for SKS/KeyGen2 are simply ignored... -->
  <target name="testjson">
    <antcall target="_test">
       <param name="test.class" value="org.webpki.json.JSONTest"/>
     </antcall>
  </target>
  
  <!-- Java to HTML -->
  <target name="_java2html">
    <echo message="Writing: ${doc.file}"/>

    <!-- Create temp directory -->
    <delete dir="${temp_dir}"/>
    <mkdir dir="${temp_dir}"/>

    <!-- Copy all files  -->
    <copy todir="${temp_dir}">
      <fileset dir="${src_generators}"/>
    </copy>
    <copy todir="${temp_dir}">
      <fileset dir="${src_dir}"/>
    </copy>
    
    <!-- Compile all -->
    <javac debug="${debug}"
           srcdir="${src_dir}:${src_generators}:${test_dir}"
           destdir="${temp_dir}" 
           classpathref="compile.classpath"
           includeAntRuntime="false">
       <compilerarg value="-Xlint:all,-rawtypes,-path"/>
    </javac>
    <java fork="yes"
          classname="${doc.class}"
          failonerror="true">
  		<classpath>
            <pathelement path="${temp_dir}"/>
  			 <fileset dir="${ext.jar}">
  		        <include name="*.jar"/>
  			 </fileset>
  		</classpath>
        <arg line="${doc.file} ${file.base1} ${file.base2} ${file.base3}"/>
     </java>
  </target>
	
</project>

