<?xml version="1.0" encoding="UTF-8"?>
<!--

  Copyright 2006-2014 WebPKI.org (http://webpki.org).

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.


        ///////////////////////////////////////////////
        // Generated by WSCreator 1.0 - Do not edit! //
        ///////////////////////////////////////////////

-->
<wsdl:definitions targetNamespace="http://xmlns.webpki.org/sks/v1.00"
                  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                  xmlns:tns="http://xmlns.webpki.org/sks/v1.00"
                  xmlns:xs="http://www.w3.org/2001/XMLSchema"
                  xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">

  <wsdl:types>

    <xs:schema targetNamespace="http://xmlns.webpki.org/sks/v1.00"
               elementFormDefault="qualified" attributeFormDefault="unqualified">

      <xs:element name="SKSException">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="message" type="xs:string" form="unqualified"/>
            <xs:element name="error" type="xs:int" form="unqualified"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                     getDeviceInfo                     #
      #########################################################
-->
      <xs:element name="getDeviceInfo">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="getDeviceInfo.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="APILevel" type="xs:short"/>
            <xs:element name="DeviceType" type="xs:byte"/>
            <xs:element name="UpdateURL" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="VendorName" type="xs:string"/>
            <xs:element name="VendorDescription" type="xs:string"/>
            <xs:element name="X509Certificate" type="xs:base64Binary" maxOccurs="unbounded"/>
            <xs:element name="SupportedAlgorithm" type="xs:string" maxOccurs="unbounded"/>
            <xs:element name="CryptoDataSize" type="xs:int"/>
            <xs:element name="ExtensionDataSize" type="xs:int"/>
            <xs:element name="DevicePINSupport" type="xs:boolean"/>
            <xs:element name="BiometricSupport" type="xs:boolean"/>
            <xs:element name="ConnectionPort" type="xs:string" nillable="true" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #               createProvisioningSession               #
      #########################################################
-->
      <xs:element name="createProvisioningSession">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="SessionKeyAlgorithm" type="xs:string"/>
            <xs:element name="PrivacyEnabled" type="xs:boolean"/>
            <xs:element name="ServerSessionID" type="xs:string"/>
            <xs:element name="ServerEphemeralKey" type="xs:base64Binary"/>
            <xs:element name="IssuerURI" type="xs:string"/>
            <xs:element name="KeyManagementKey" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="ClientTime" type="xs:int"/>
            <xs:element name="SessionLifeTime" type="xs:int"/>
            <xs:element name="SessionKeyLimit" type="xs:short"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="createProvisioningSession.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
            <xs:element name="ClientSessionID" type="xs:string"/>
            <xs:element name="ClientEphemeralKey" type="xs:base64Binary"/>
            <xs:element name="Attestation" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #               closeProvisioningSession                #
      #########################################################
-->
      <xs:element name="closeProvisioningSession">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
            <xs:element name="Nonce" type="xs:base64Binary"/>
            <xs:element name="MAC" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="closeProvisioningSession.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="CloseAttestation" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #             enumerateProvisioningSessions             #
      #########################################################
-->
      <xs:element name="enumerateProvisioningSessions">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
            <xs:element name="ProvisioningState" type="xs:boolean"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="enumerateProvisioningSessions.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
            <xs:element name="SessionKeyAlgorithm" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="PrivacyEnabled" type="xs:boolean" nillable="true" minOccurs="0"/>
            <xs:element name="KeyManagementKey" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="ClientTime" type="xs:int" nillable="true" minOccurs="0"/>
            <xs:element name="SessionLifeTime" type="xs:int" nillable="true" minOccurs="0"/>
            <xs:element name="ServerSessionID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="ClientSessionID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="IssuerURI" type="xs:string" nillable="true" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #               abortProvisioningSession                #
      #########################################################
-->
      <xs:element name="abortProvisioningSession">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="abortProvisioningSession.Response"/>

<!--
      #########################################################
      #              signProvisioningSessionData              #
      #########################################################
-->
      <xs:element name="signProvisioningSessionData">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
            <xs:element name="Data" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="signProvisioningSessionData.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Signature" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                    createPukPolicy                    #
      #########################################################
-->
      <xs:element name="createPukPolicy">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
            <xs:element name="ID" type="xs:string"/>
            <xs:element name="EncryptedPuk" type="xs:base64Binary"/>
            <xs:element name="Format" type="xs:byte"/>
            <xs:element name="RetryLimit" type="xs:short"/>
            <xs:element name="MAC" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="createPukPolicy.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="PukPolicyHandle" type="xs:int"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                    createPinPolicy                    #
      #########################################################
-->
      <xs:element name="createPinPolicy">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
            <xs:element name="ID" type="xs:string"/>
            <xs:element name="PukPolicyHandle" type="xs:int"/>
            <xs:element name="UserDefined" type="xs:boolean"/>
            <xs:element name="UserModifiable" type="xs:boolean"/>
            <xs:element name="Format" type="xs:byte"/>
            <xs:element name="RetryLimit" type="xs:short"/>
            <xs:element name="Grouping" type="xs:byte"/>
            <xs:element name="PatternRestrictions" type="xs:byte"/>
            <xs:element name="MinLength" type="xs:short"/>
            <xs:element name="MaxLength" type="xs:short"/>
            <xs:element name="InputMethod" type="xs:byte"/>
            <xs:element name="MAC" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="createPinPolicy.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="PINPolicyHandle" type="xs:int"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                    createKeyEntry                     #
      #########################################################
-->
      <xs:element name="createKeyEntry">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
            <xs:element name="ID" type="xs:string"/>
            <xs:element name="KeyEntryAlgorithm" type="xs:string"/>
            <xs:element name="ServerSeed" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="DevicePinProtection" type="xs:boolean"/>
            <xs:element name="PinPolicyHandle" type="xs:int"/>
            <xs:element name="PinValue" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="EnablePinCaching" type="xs:boolean"/>
            <xs:element name="BiometricProtection" type="xs:byte"/>
            <xs:element name="ExportProtection" type="xs:byte"/>
            <xs:element name="DeleteProtection" type="xs:byte"/>
            <xs:element name="AppUsage" type="xs:byte"/>
            <xs:element name="FriendlyName" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyAlgorithm" type="xs:string"/>
            <xs:element name="KeyParameters" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="EndorsedAlgorithm" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="MAC" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="createKeyEntry.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="PublicKey" type="xs:base64Binary"/>
            <xs:element name="Attestation" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                     getKeyHandle                      #
      #########################################################
-->
      <xs:element name="getKeyHandle">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
            <xs:element name="ID" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="getKeyHandle.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="KeyHandle" type="xs:int"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                  setCertificatePath                   #
      #########################################################
-->
      <xs:element name="setCertificatePath">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="X509Certificate" type="xs:base64Binary" maxOccurs="unbounded"/>
            <xs:element name="MAC" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="setCertificatePath.Response"/>

<!--
      #########################################################
      #                  importSymmetricKey                   #
      #########################################################
-->
      <xs:element name="importSymmetricKey">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="EncryptedKey" type="xs:base64Binary"/>
            <xs:element name="MAC" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="importSymmetricKey.Response"/>

<!--
      #########################################################
      #                   importPrivateKey                    #
      #########################################################
-->
      <xs:element name="importPrivateKey">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="EncryptedKey" type="xs:base64Binary"/>
            <xs:element name="MAC" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="importPrivateKey.Response"/>

<!--
      #########################################################
      #                     addExtension                      #
      #########################################################
-->
      <xs:element name="addExtension">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Type" type="xs:string"/>
            <xs:element name="SubType" type="xs:byte"/>
            <xs:element name="Qualifier" type="xs:string"/>
            <xs:element name="ExtensionData" type="xs:base64Binary"/>
            <xs:element name="MAC" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="addExtension.Response"/>

<!--
      #########################################################
      #                     postDeleteKey                     #
      #########################################################
-->
      <xs:element name="postDeleteKey">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
            <xs:element name="TargetKeyHandle" type="xs:int"/>
            <xs:element name="Authorization" type="xs:base64Binary"/>
            <xs:element name="MAC" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="postDeleteKey.Response"/>

<!--
      #########################################################
      #                     postUnlockKey                     #
      #########################################################
-->
      <xs:element name="postUnlockKey">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
            <xs:element name="TargetKeyHandle" type="xs:int"/>
            <xs:element name="Authorization" type="xs:base64Binary"/>
            <xs:element name="MAC" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="postUnlockKey.Response"/>

<!--
      #########################################################
      #                     postUpdateKey                     #
      #########################################################
-->
      <xs:element name="postUpdateKey">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="TargetKeyHandle" type="xs:int"/>
            <xs:element name="Authorization" type="xs:base64Binary"/>
            <xs:element name="MAC" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="postUpdateKey.Response"/>

<!--
      #########################################################
      #                postCloneKeyProtection                 #
      #########################################################
-->
      <xs:element name="postCloneKeyProtection">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="TargetKeyHandle" type="xs:int"/>
            <xs:element name="Authorization" type="xs:base64Binary"/>
            <xs:element name="MAC" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="postCloneKeyProtection.Response"/>

<!--
      #########################################################
      #                     enumerateKeys                     #
      #########################################################
-->
      <xs:element name="enumerateKeys">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="enumerateKeys.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="ProvisioningHandle" type="xs:int" nillable="true" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                updateKeyManagementKey                 #
      #########################################################
-->
      <xs:element name="updateKeyManagementKey">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="ProvisioningHandle" type="xs:int"/>
            <xs:element name="KeyManagementKey" type="xs:base64Binary"/>
            <xs:element name="Attestation" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="updateKeyManagementKey.Response"/>

<!--
      #########################################################
      #                   getKeyAttributes                    #
      #########################################################
-->
      <xs:element name="getKeyAttributes">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="getKeyAttributes.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="SymmetricKeyLength" type="xs:short"/>
            <xs:element name="X509Certificate" type="xs:base64Binary" maxOccurs="unbounded"/>
            <xs:element name="AppUsage" type="xs:byte"/>
            <xs:element name="FriendlyName" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="EndorsedAlgorithm" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="ExtensionType" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                 getKeyProtectionInfo                  #
      #########################################################
-->
      <xs:element name="getKeyProtectionInfo">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="getKeyProtectionInfo.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="ProtectionStatus" type="xs:byte"/>
            <xs:element name="PukFormat" type="xs:byte"/>
            <xs:element name="PukRetryLimit" type="xs:short"/>
            <xs:element name="PukErrorCount" type="xs:short"/>
            <xs:element name="UserDefined" type="xs:boolean"/>
            <xs:element name="UserModifiable" type="xs:boolean"/>
            <xs:element name="Format" type="xs:byte"/>
            <xs:element name="RetryLimit" type="xs:short"/>
            <xs:element name="Grouping" type="xs:byte"/>
            <xs:element name="PatternRestrictions" type="xs:byte"/>
            <xs:element name="MinLength" type="xs:short"/>
            <xs:element name="MaxLength" type="xs:short"/>
            <xs:element name="InputMethod" type="xs:byte"/>
            <xs:element name="PinErrorCount" type="xs:short"/>
            <xs:element name="EnablePinCaching" type="xs:boolean"/>
            <xs:element name="BiometricProtection" type="xs:byte"/>
            <xs:element name="ExportProtection" type="xs:byte"/>
            <xs:element name="DeleteProtection" type="xs:byte"/>
            <xs:element name="KeyBackup" type="xs:byte"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                     getExtension                      #
      #########################################################
-->
      <xs:element name="getExtension">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Type" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="getExtension.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="SubType" type="xs:byte"/>
            <xs:element name="Qualifier" type="xs:string"/>
            <xs:element name="ExtensionData" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                      setProperty                      #
      #########################################################
-->
      <xs:element name="setProperty">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Type" type="xs:string"/>
            <xs:element name="Name" type="xs:string"/>
            <xs:element name="Value" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="setProperty.Response"/>

<!--
      #########################################################
      #                       deleteKey                       #
      #########################################################
-->
      <xs:element name="deleteKey">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Authorization" type="xs:base64Binary" nillable="true" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="deleteKey.Response"/>

<!--
      #########################################################
      #                       exportKey                       #
      #########################################################
-->
      <xs:element name="exportKey">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Authorization" type="xs:base64Binary" nillable="true" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="exportKey.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Key" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                       unlockKey                       #
      #########################################################
-->
      <xs:element name="unlockKey">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Authorization" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="unlockKey.Response"/>

<!--
      #########################################################
      #                       changePin                       #
      #########################################################
-->
      <xs:element name="changePin">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Authorization" type="xs:base64Binary"/>
            <xs:element name="NewPin" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="changePin.Response"/>

<!--
      #########################################################
      #                        setPin                         #
      #########################################################
-->
      <xs:element name="setPin">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Authorization" type="xs:base64Binary"/>
            <xs:element name="NewPin" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="setPin.Response"/>

<!--
      #########################################################
      #                    signHashedData                     #
      #########################################################
-->
      <xs:element name="signHashedData">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Algorithm" type="xs:string"/>
            <xs:element name="Parameters" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="TrustedGUIAuthorization" type="xs:boolean"/>
            <xs:element name="Authorization" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="Data" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="signHashedData.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Result" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                 asymmetricKeyDecrypt                  #
      #########################################################
-->
      <xs:element name="asymmetricKeyDecrypt">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Algorithm" type="xs:string"/>
            <xs:element name="Parameters" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="TrustedGUIAuthorization" type="xs:boolean"/>
            <xs:element name="Authorization" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="Data" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="asymmetricKeyDecrypt.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Result" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                     keyAgreement                      #
      #########################################################
-->
      <xs:element name="keyAgreement">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Algorithm" type="xs:string"/>
            <xs:element name="Parameters" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="TrustedGUIAuthorization" type="xs:boolean"/>
            <xs:element name="Authorization" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="PublicKey" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="keyAgreement.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Result" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                      performHmac                      #
      #########################################################
-->
      <xs:element name="performHmac">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Algorithm" type="xs:string"/>
            <xs:element name="Parameters" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="TrustedGUIAuthorization" type="xs:boolean"/>
            <xs:element name="Authorization" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="Data" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="performHmac.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Result" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                  symmetricKeyEncrypt                  #
      #########################################################
-->
      <xs:element name="symmetricKeyEncrypt">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="KeyHandle" type="xs:int"/>
            <xs:element name="Algorithm" type="xs:string"/>
            <xs:element name="Mode" type="xs:boolean"/>
            <xs:element name="Parameters" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="TrustedGUIAuthorization" type="xs:boolean"/>
            <xs:element name="Authorization" type="xs:base64Binary" nillable="true" minOccurs="0"/>
            <xs:element name="Data" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="symmetricKeyEncrypt.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Result" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                    updateFirmware                     #
      #########################################################
-->
      <xs:element name="updateFirmware">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" nillable="true" minOccurs="0"/>
            <xs:element name="Chunk" type="xs:base64Binary"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="updateFirmware.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="NextURL" type="xs:string" nillable="true" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                      listDevices                      #
      #########################################################
-->
      <xs:element name="listDevices"/>
      <xs:element name="listDevices.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="DeviceID" type="xs:string" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                      getVersion                       #
      #########################################################
-->
      <xs:element name="getVersion"/>
      <xs:element name="getVersion.Response">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Version" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>

<!--
      #########################################################
      #                       logEvent                        #
      #########################################################
-->
      <xs:element name="logEvent">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Description" type="xs:string"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="logEvent.Response"/>

    </xs:schema>

  </wsdl:types>

  <wsdl:message name="SKSException">
    <wsdl:part name="fault" element="tns:SKSException"/>
  </wsdl:message>

  <wsdl:message name="getDeviceInfo">
    <wsdl:part name="parameters" element="tns:getDeviceInfo"/>
  </wsdl:message>

  <wsdl:message name="getDeviceInfo.Response">
    <wsdl:part name="parameters" element="tns:getDeviceInfo.Response"/>
  </wsdl:message>

  <wsdl:message name="createProvisioningSession">
    <wsdl:part name="parameters" element="tns:createProvisioningSession"/>
  </wsdl:message>

  <wsdl:message name="createProvisioningSession.Response">
    <wsdl:part name="parameters" element="tns:createProvisioningSession.Response"/>
  </wsdl:message>

  <wsdl:message name="closeProvisioningSession">
    <wsdl:part name="parameters" element="tns:closeProvisioningSession"/>
  </wsdl:message>

  <wsdl:message name="closeProvisioningSession.Response">
    <wsdl:part name="parameters" element="tns:closeProvisioningSession.Response"/>
  </wsdl:message>

  <wsdl:message name="enumerateProvisioningSessions">
    <wsdl:part name="parameters" element="tns:enumerateProvisioningSessions"/>
  </wsdl:message>

  <wsdl:message name="enumerateProvisioningSessions.Response">
    <wsdl:part name="parameters" element="tns:enumerateProvisioningSessions.Response"/>
  </wsdl:message>

  <wsdl:message name="abortProvisioningSession">
    <wsdl:part name="parameters" element="tns:abortProvisioningSession"/>
  </wsdl:message>

  <wsdl:message name="abortProvisioningSession.Response">
    <wsdl:part name="parameters" element="tns:abortProvisioningSession.Response"/>
  </wsdl:message>

  <wsdl:message name="signProvisioningSessionData">
    <wsdl:part name="parameters" element="tns:signProvisioningSessionData"/>
  </wsdl:message>

  <wsdl:message name="signProvisioningSessionData.Response">
    <wsdl:part name="parameters" element="tns:signProvisioningSessionData.Response"/>
  </wsdl:message>

  <wsdl:message name="createPukPolicy">
    <wsdl:part name="parameters" element="tns:createPukPolicy"/>
  </wsdl:message>

  <wsdl:message name="createPukPolicy.Response">
    <wsdl:part name="parameters" element="tns:createPukPolicy.Response"/>
  </wsdl:message>

  <wsdl:message name="createPinPolicy">
    <wsdl:part name="parameters" element="tns:createPinPolicy"/>
  </wsdl:message>

  <wsdl:message name="createPinPolicy.Response">
    <wsdl:part name="parameters" element="tns:createPinPolicy.Response"/>
  </wsdl:message>

  <wsdl:message name="createKeyEntry">
    <wsdl:part name="parameters" element="tns:createKeyEntry"/>
  </wsdl:message>

  <wsdl:message name="createKeyEntry.Response">
    <wsdl:part name="parameters" element="tns:createKeyEntry.Response"/>
  </wsdl:message>

  <wsdl:message name="getKeyHandle">
    <wsdl:part name="parameters" element="tns:getKeyHandle"/>
  </wsdl:message>

  <wsdl:message name="getKeyHandle.Response">
    <wsdl:part name="parameters" element="tns:getKeyHandle.Response"/>
  </wsdl:message>

  <wsdl:message name="setCertificatePath">
    <wsdl:part name="parameters" element="tns:setCertificatePath"/>
  </wsdl:message>

  <wsdl:message name="setCertificatePath.Response">
    <wsdl:part name="parameters" element="tns:setCertificatePath.Response"/>
  </wsdl:message>

  <wsdl:message name="importSymmetricKey">
    <wsdl:part name="parameters" element="tns:importSymmetricKey"/>
  </wsdl:message>

  <wsdl:message name="importSymmetricKey.Response">
    <wsdl:part name="parameters" element="tns:importSymmetricKey.Response"/>
  </wsdl:message>

  <wsdl:message name="importPrivateKey">
    <wsdl:part name="parameters" element="tns:importPrivateKey"/>
  </wsdl:message>

  <wsdl:message name="importPrivateKey.Response">
    <wsdl:part name="parameters" element="tns:importPrivateKey.Response"/>
  </wsdl:message>

  <wsdl:message name="addExtension">
    <wsdl:part name="parameters" element="tns:addExtension"/>
  </wsdl:message>

  <wsdl:message name="addExtension.Response">
    <wsdl:part name="parameters" element="tns:addExtension.Response"/>
  </wsdl:message>

  <wsdl:message name="postDeleteKey">
    <wsdl:part name="parameters" element="tns:postDeleteKey"/>
  </wsdl:message>

  <wsdl:message name="postDeleteKey.Response">
    <wsdl:part name="parameters" element="tns:postDeleteKey.Response"/>
  </wsdl:message>

  <wsdl:message name="postUnlockKey">
    <wsdl:part name="parameters" element="tns:postUnlockKey"/>
  </wsdl:message>

  <wsdl:message name="postUnlockKey.Response">
    <wsdl:part name="parameters" element="tns:postUnlockKey.Response"/>
  </wsdl:message>

  <wsdl:message name="postUpdateKey">
    <wsdl:part name="parameters" element="tns:postUpdateKey"/>
  </wsdl:message>

  <wsdl:message name="postUpdateKey.Response">
    <wsdl:part name="parameters" element="tns:postUpdateKey.Response"/>
  </wsdl:message>

  <wsdl:message name="postCloneKeyProtection">
    <wsdl:part name="parameters" element="tns:postCloneKeyProtection"/>
  </wsdl:message>

  <wsdl:message name="postCloneKeyProtection.Response">
    <wsdl:part name="parameters" element="tns:postCloneKeyProtection.Response"/>
  </wsdl:message>

  <wsdl:message name="enumerateKeys">
    <wsdl:part name="parameters" element="tns:enumerateKeys"/>
  </wsdl:message>

  <wsdl:message name="enumerateKeys.Response">
    <wsdl:part name="parameters" element="tns:enumerateKeys.Response"/>
  </wsdl:message>

  <wsdl:message name="updateKeyManagementKey">
    <wsdl:part name="parameters" element="tns:updateKeyManagementKey"/>
  </wsdl:message>

  <wsdl:message name="updateKeyManagementKey.Response">
    <wsdl:part name="parameters" element="tns:updateKeyManagementKey.Response"/>
  </wsdl:message>

  <wsdl:message name="getKeyAttributes">
    <wsdl:part name="parameters" element="tns:getKeyAttributes"/>
  </wsdl:message>

  <wsdl:message name="getKeyAttributes.Response">
    <wsdl:part name="parameters" element="tns:getKeyAttributes.Response"/>
  </wsdl:message>

  <wsdl:message name="getKeyProtectionInfo">
    <wsdl:part name="parameters" element="tns:getKeyProtectionInfo"/>
  </wsdl:message>

  <wsdl:message name="getKeyProtectionInfo.Response">
    <wsdl:part name="parameters" element="tns:getKeyProtectionInfo.Response"/>
  </wsdl:message>

  <wsdl:message name="getExtension">
    <wsdl:part name="parameters" element="tns:getExtension"/>
  </wsdl:message>

  <wsdl:message name="getExtension.Response">
    <wsdl:part name="parameters" element="tns:getExtension.Response"/>
  </wsdl:message>

  <wsdl:message name="setProperty">
    <wsdl:part name="parameters" element="tns:setProperty"/>
  </wsdl:message>

  <wsdl:message name="setProperty.Response">
    <wsdl:part name="parameters" element="tns:setProperty.Response"/>
  </wsdl:message>

  <wsdl:message name="deleteKey">
    <wsdl:part name="parameters" element="tns:deleteKey"/>
  </wsdl:message>

  <wsdl:message name="deleteKey.Response">
    <wsdl:part name="parameters" element="tns:deleteKey.Response"/>
  </wsdl:message>

  <wsdl:message name="exportKey">
    <wsdl:part name="parameters" element="tns:exportKey"/>
  </wsdl:message>

  <wsdl:message name="exportKey.Response">
    <wsdl:part name="parameters" element="tns:exportKey.Response"/>
  </wsdl:message>

  <wsdl:message name="unlockKey">
    <wsdl:part name="parameters" element="tns:unlockKey"/>
  </wsdl:message>

  <wsdl:message name="unlockKey.Response">
    <wsdl:part name="parameters" element="tns:unlockKey.Response"/>
  </wsdl:message>

  <wsdl:message name="changePin">
    <wsdl:part name="parameters" element="tns:changePin"/>
  </wsdl:message>

  <wsdl:message name="changePin.Response">
    <wsdl:part name="parameters" element="tns:changePin.Response"/>
  </wsdl:message>

  <wsdl:message name="setPin">
    <wsdl:part name="parameters" element="tns:setPin"/>
  </wsdl:message>

  <wsdl:message name="setPin.Response">
    <wsdl:part name="parameters" element="tns:setPin.Response"/>
  </wsdl:message>

  <wsdl:message name="signHashedData">
    <wsdl:part name="parameters" element="tns:signHashedData"/>
  </wsdl:message>

  <wsdl:message name="signHashedData.Response">
    <wsdl:part name="parameters" element="tns:signHashedData.Response"/>
  </wsdl:message>

  <wsdl:message name="asymmetricKeyDecrypt">
    <wsdl:part name="parameters" element="tns:asymmetricKeyDecrypt"/>
  </wsdl:message>

  <wsdl:message name="asymmetricKeyDecrypt.Response">
    <wsdl:part name="parameters" element="tns:asymmetricKeyDecrypt.Response"/>
  </wsdl:message>

  <wsdl:message name="keyAgreement">
    <wsdl:part name="parameters" element="tns:keyAgreement"/>
  </wsdl:message>

  <wsdl:message name="keyAgreement.Response">
    <wsdl:part name="parameters" element="tns:keyAgreement.Response"/>
  </wsdl:message>

  <wsdl:message name="performHmac">
    <wsdl:part name="parameters" element="tns:performHmac"/>
  </wsdl:message>

  <wsdl:message name="performHmac.Response">
    <wsdl:part name="parameters" element="tns:performHmac.Response"/>
  </wsdl:message>

  <wsdl:message name="symmetricKeyEncrypt">
    <wsdl:part name="parameters" element="tns:symmetricKeyEncrypt"/>
  </wsdl:message>

  <wsdl:message name="symmetricKeyEncrypt.Response">
    <wsdl:part name="parameters" element="tns:symmetricKeyEncrypt.Response"/>
  </wsdl:message>

  <wsdl:message name="updateFirmware">
    <wsdl:part name="parameters" element="tns:updateFirmware"/>
  </wsdl:message>

  <wsdl:message name="updateFirmware.Response">
    <wsdl:part name="parameters" element="tns:updateFirmware.Response"/>
  </wsdl:message>

  <wsdl:message name="listDevices">
    <wsdl:part name="parameters" element="tns:listDevices"/>
  </wsdl:message>

  <wsdl:message name="listDevices.Response">
    <wsdl:part name="parameters" element="tns:listDevices.Response"/>
  </wsdl:message>

  <wsdl:message name="getVersion">
    <wsdl:part name="parameters" element="tns:getVersion"/>
  </wsdl:message>

  <wsdl:message name="getVersion.Response">
    <wsdl:part name="parameters" element="tns:getVersion.Response"/>
  </wsdl:message>

  <wsdl:message name="logEvent">
    <wsdl:part name="parameters" element="tns:logEvent"/>
  </wsdl:message>

  <wsdl:message name="logEvent.Response">
    <wsdl:part name="parameters" element="tns:logEvent.Response"/>
  </wsdl:message>

  <wsdl:portType name="SKSWS.Interface">

    <wsdl:operation name="getDeviceInfo">
      <wsdl:input message="tns:getDeviceInfo"/>
      <wsdl:output message="tns:getDeviceInfo.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="createProvisioningSession">
      <wsdl:input message="tns:createProvisioningSession"/>
      <wsdl:output message="tns:createProvisioningSession.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="closeProvisioningSession">
      <wsdl:input message="tns:closeProvisioningSession"/>
      <wsdl:output message="tns:closeProvisioningSession.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="enumerateProvisioningSessions">
      <wsdl:input message="tns:enumerateProvisioningSessions"/>
      <wsdl:output message="tns:enumerateProvisioningSessions.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="abortProvisioningSession">
      <wsdl:input message="tns:abortProvisioningSession"/>
      <wsdl:output message="tns:abortProvisioningSession.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="signProvisioningSessionData">
      <wsdl:input message="tns:signProvisioningSessionData"/>
      <wsdl:output message="tns:signProvisioningSessionData.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="createPukPolicy">
      <wsdl:input message="tns:createPukPolicy"/>
      <wsdl:output message="tns:createPukPolicy.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="createPinPolicy">
      <wsdl:input message="tns:createPinPolicy"/>
      <wsdl:output message="tns:createPinPolicy.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="createKeyEntry">
      <wsdl:input message="tns:createKeyEntry"/>
      <wsdl:output message="tns:createKeyEntry.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="getKeyHandle">
      <wsdl:input message="tns:getKeyHandle"/>
      <wsdl:output message="tns:getKeyHandle.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="setCertificatePath">
      <wsdl:input message="tns:setCertificatePath"/>
      <wsdl:output message="tns:setCertificatePath.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="importSymmetricKey">
      <wsdl:input message="tns:importSymmetricKey"/>
      <wsdl:output message="tns:importSymmetricKey.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="importPrivateKey">
      <wsdl:input message="tns:importPrivateKey"/>
      <wsdl:output message="tns:importPrivateKey.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="addExtension">
      <wsdl:input message="tns:addExtension"/>
      <wsdl:output message="tns:addExtension.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="postDeleteKey">
      <wsdl:input message="tns:postDeleteKey"/>
      <wsdl:output message="tns:postDeleteKey.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="postUnlockKey">
      <wsdl:input message="tns:postUnlockKey"/>
      <wsdl:output message="tns:postUnlockKey.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="postUpdateKey">
      <wsdl:input message="tns:postUpdateKey"/>
      <wsdl:output message="tns:postUpdateKey.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="postCloneKeyProtection">
      <wsdl:input message="tns:postCloneKeyProtection"/>
      <wsdl:output message="tns:postCloneKeyProtection.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="enumerateKeys">
      <wsdl:input message="tns:enumerateKeys"/>
      <wsdl:output message="tns:enumerateKeys.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="updateKeyManagementKey">
      <wsdl:input message="tns:updateKeyManagementKey"/>
      <wsdl:output message="tns:updateKeyManagementKey.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="getKeyAttributes">
      <wsdl:input message="tns:getKeyAttributes"/>
      <wsdl:output message="tns:getKeyAttributes.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="getKeyProtectionInfo">
      <wsdl:input message="tns:getKeyProtectionInfo"/>
      <wsdl:output message="tns:getKeyProtectionInfo.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="getExtension">
      <wsdl:input message="tns:getExtension"/>
      <wsdl:output message="tns:getExtension.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="setProperty">
      <wsdl:input message="tns:setProperty"/>
      <wsdl:output message="tns:setProperty.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="deleteKey">
      <wsdl:input message="tns:deleteKey"/>
      <wsdl:output message="tns:deleteKey.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="exportKey">
      <wsdl:input message="tns:exportKey"/>
      <wsdl:output message="tns:exportKey.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="unlockKey">
      <wsdl:input message="tns:unlockKey"/>
      <wsdl:output message="tns:unlockKey.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="changePin">
      <wsdl:input message="tns:changePin"/>
      <wsdl:output message="tns:changePin.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="setPin">
      <wsdl:input message="tns:setPin"/>
      <wsdl:output message="tns:setPin.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="signHashedData">
      <wsdl:input message="tns:signHashedData"/>
      <wsdl:output message="tns:signHashedData.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="asymmetricKeyDecrypt">
      <wsdl:input message="tns:asymmetricKeyDecrypt"/>
      <wsdl:output message="tns:asymmetricKeyDecrypt.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="keyAgreement">
      <wsdl:input message="tns:keyAgreement"/>
      <wsdl:output message="tns:keyAgreement.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="performHmac">
      <wsdl:input message="tns:performHmac"/>
      <wsdl:output message="tns:performHmac.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="symmetricKeyEncrypt">
      <wsdl:input message="tns:symmetricKeyEncrypt"/>
      <wsdl:output message="tns:symmetricKeyEncrypt.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="updateFirmware">
      <wsdl:input message="tns:updateFirmware"/>
      <wsdl:output message="tns:updateFirmware.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="listDevices">
      <wsdl:input message="tns:listDevices"/>
      <wsdl:output message="tns:listDevices.Response"/>
      <wsdl:fault message="tns:SKSException" name="SKSException"/>
    </wsdl:operation>

    <wsdl:operation name="getVersion">
      <wsdl:input message="tns:getVersion"/>
      <wsdl:output message="tns:getVersion.Response"/>
    </wsdl:operation>

    <wsdl:operation name="logEvent">
      <wsdl:input message="tns:logEvent"/>
      <wsdl:output message="tns:logEvent.Response"/>
    </wsdl:operation>

  </wsdl:portType>

  <wsdl:binding name="SKSWS.Binding" type="tns:SKSWS.Interface">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

      <wsdl:operation name="getDeviceInfo">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="createProvisioningSession">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="closeProvisioningSession">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="enumerateProvisioningSessions">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="abortProvisioningSession">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="signProvisioningSessionData">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="createPukPolicy">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="createPinPolicy">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="createKeyEntry">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="getKeyHandle">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="setCertificatePath">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="importSymmetricKey">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="importPrivateKey">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="addExtension">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="postDeleteKey">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="postUnlockKey">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="postUpdateKey">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="postCloneKeyProtection">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="enumerateKeys">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="updateKeyManagementKey">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="getKeyAttributes">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="getKeyProtectionInfo">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="getExtension">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="setProperty">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="deleteKey">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="exportKey">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="unlockKey">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="changePin">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="setPin">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="signHashedData">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="asymmetricKeyDecrypt">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="keyAgreement">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="performHmac">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="symmetricKeyEncrypt">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="updateFirmware">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="listDevices">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
        <wsdl:fault name="SKSException">
          <soap:fault name="SKSException" use="literal"/>
        </wsdl:fault>
      </wsdl:operation>

      <wsdl:operation name="getVersion">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
      </wsdl:operation>

      <wsdl:operation name="logEvent">
        <wsdl:input>
          <soap:body use="literal"/>
        </wsdl:input>
        <wsdl:output>
          <soap:body use="literal"/>
        </wsdl:output>
      </wsdl:operation>

    </wsdl:binding>

  <wsdl:service name="SKSWS">
     <wsdl:port name="SKSWS.Port" binding="tns:SKSWS.Binding">
       <soap:address location="http://localhost:9982/securekeystore"/>
     </wsdl:port>
  </wsdl:service>

</wsdl:definitions>
