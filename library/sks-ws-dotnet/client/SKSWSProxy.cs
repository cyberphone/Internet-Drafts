/*
 *  Copyright 2006-2014 WebPKI.org (http://webpki.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
namespace org.webpki.sks.ws.client
{

        ///////////////////////////////////////////////
        // Generated by WSCreator 1.0 - Do not edit! //
        ///////////////////////////////////////////////

    using System.Collections.Generic;

    using System.Security.Cryptography.X509Certificates;

    /*
     *  This is the .NET SKS WS client.
     */
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00")]
    public interface SKSWSProxyInterface
    {
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        DeviceInfo getDeviceInfo(getDeviceInfo_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        ProvisioningSession createProvisioningSession(createProvisioningSession_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        closeProvisioningSession_Response closeProvisioningSession(closeProvisioningSession_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        EnumeratedProvisioningSession enumerateProvisioningSessions(enumerateProvisioningSessions_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        abortProvisioningSession_Response abortProvisioningSession(abortProvisioningSession_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        signProvisioningSessionData_Response signProvisioningSessionData(signProvisioningSessionData_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        createPukPolicy_Response createPukPolicy(createPukPolicy_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        createPinPolicy_Response createPinPolicy(createPinPolicy_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        KeyData createKeyEntry(createKeyEntry_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        getKeyHandle_Response getKeyHandle(getKeyHandle_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        setCertificatePath_Response setCertificatePath(setCertificatePath_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        importSymmetricKey_Response importSymmetricKey(importSymmetricKey_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        importPrivateKey_Response importPrivateKey(importPrivateKey_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        addExtension_Response addExtension(addExtension_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        postDeleteKey_Response postDeleteKey(postDeleteKey_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        postUnlockKey_Response postUnlockKey(postUnlockKey_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        postUpdateKey_Response postUpdateKey(postUpdateKey_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        postCloneKeyProtection_Response postCloneKeyProtection(postCloneKeyProtection_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        EnumeratedKey enumerateKeys(enumerateKeys_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        updateKeyManagementKey_Response updateKeyManagementKey(updateKeyManagementKey_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        KeyAttributes getKeyAttributes(getKeyAttributes_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        KeyProtectionInfo getKeyProtectionInfo(getKeyProtectionInfo_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        Extension getExtension(getExtension_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        setProperty_Response setProperty(setProperty_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        deleteKey_Response deleteKey(deleteKey_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        exportKey_Response exportKey(exportKey_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        unlockKey_Response unlockKey(unlockKey_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        changePin_Response changePin(changePin_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        setPin_Response setPin(setPin_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        signHashedData_Response signHashedData(signHashedData_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        asymmetricKeyDecrypt_Response asymmetricKeyDecrypt(asymmetricKeyDecrypt_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        keyAgreement_Response keyAgreement(keyAgreement_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        performHmac_Response performHmac(performHmac_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        symmetricKeyEncrypt_Response symmetricKeyEncrypt(symmetricKeyEncrypt_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        updateFirmware_Response updateFirmware(updateFirmware_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(_SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        listDevices_Response listDevices(listDevices_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        getVersion_Response getVersion(getVersion_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        logEvent_Response logEvent(logEvent_Request request);
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public class _SKSException : System.Xml.Serialization.IXmlSerializable
    {
        private System.Xml.XmlNode[] nodes;

        public System.Xml.Schema.XmlSchema GetSchema()
        {
            return null;
        }

        public void ReadXml(System.Xml.XmlReader reader)
        {
            nodes = System.Runtime.Serialization.XmlSerializableServices.ReadNodes(reader);
        }

        public void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Runtime.Serialization.XmlSerializableServices.WriteNodes(writer, nodes);
        }

        internal int error
        {
            get { return System.Int32.Parse(nodes[0].InnerXml); }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public class SKSException : System.Exception
    {
        public SKSException (string message, int error) : base(message)
        {
            this.error = error;
        }

        public SKSException (System.ServiceModel.FaultException<_SKSException> e) : base(e.Message, e)
        {
            this.error = e.Detail.error;
        }

        public const int ERROR_AUTHORIZATION = 0x01;

        public const int ERROR_NOT_ALLOWED = 0x02;

        public const int ERROR_STORAGE = 0x03;

        public const int ERROR_MAC = 0x04;

        public const int ERROR_CRYPTO = 0x05;

        public const int ERROR_NO_SESSION = 0x06;

        public const int ERROR_NO_KEY = 0x07;

        public const int ERROR_ALGORITHM = 0x08;

        public const int ERROR_OPTION = 0x09;

        public const int ERROR_INTERNAL = 0x0A;

        public const int ERROR_EXTERNAL = 0x0B;

        public const int ERROR_USER_ABORT = 0x0C;

        public const int ERROR_NOT_AVAILABLE = 0x0D;

        private int error;

        public int Error
        {
            get { return error; }
        }
    }

    public enum AppUsage : sbyte
    {
        SIGNATURE = 0x00,
        AUTHENTICATION = 0x01,
        ENCRYPTION = 0x02,
        UNIVERSAL = 0x03
    }

    public enum Grouping : sbyte
    {
        NONE = 0x00,
        SHARED = 0x01,
        SIGNATURE_PLUS_STANDARD = 0x02,
        UNIQUE = 0x03
    }

    public enum InputMethod : sbyte
    {
        ANY = 0x00,
        PROGRAMMATIC = 0x01,
        TRUSTED_GUI = 0x02
    }

    public enum PassphraseFormat : sbyte
    {
        NUMERIC = 0x00,
        ALPHANUMERIC = 0x01,
        STRING = 0x02,
        BINARY = 0x03
    }

    public enum PatternRestriction : sbyte
    {
        TWO_IN_A_ROW = 0x01,
        THREE_IN_A_ROW = 0x02,
        SEQUENCE = 0x04,
        REPEATED = 0x08,
        MISSING_GROUP = 0x10
    }

    public enum DeleteProtection : sbyte
    {
        NONE = 0x00,
        PIN = 0x01,
        PUK = 0x02,
        NON_DELETABLE = 0x03
    }

    public enum ExportProtection : sbyte
    {
        NONE = 0x00,
        PIN = 0x01,
        PUK = 0x02,
        NON_EXPORTABLE = 0x03
    }

    public enum BiometricProtection : sbyte
    {
        NONE = 0x00,
        ALTERNATIVE = 0x01,
        COMBINED = 0x02,
        EXCLUSIVE = 0x03
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getDeviceInfo", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class getDeviceInfo_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        public getDeviceInfo_Request(string DeviceID)
        {
            _device_id = DeviceID;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getDeviceInfo.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class DeviceInfo
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="APILevel", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal short _api_level;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceType", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _device_type;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="UpdateURL", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _update_url;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="VendorName", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _vendor_name;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="VendorDescription", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _vendor_description;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="X509Certificate", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal List<byte[]> _certificate_path;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="SupportedAlgorithm", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal List<string> _supported_algorithms;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=7)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="CryptoDataSize", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal int _crypto_data_size;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ExtensionDataSize", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal int _extension_data_size;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=9)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DevicePINSupport", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal bool _device_pin_support;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=10)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="BiometricSupport", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal bool _biometric_support;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=11)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ConnectionPort", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _connection_port;
        #pragma warning restore 0649

        internal DeviceInfo () {}

        public const sbyte LOCATION_EXTERNAL = 0x00;

        public const sbyte LOCATION_EMBEDDED = 0x01;

        public const sbyte LOCATION_SOCKETED = 0x02;

        public const sbyte LOCATION_SIM = 0x03;

        public const sbyte LOCATION_MASK = 0x03;

        public const sbyte TYPE_SOFTWARE = 0x00;

        public const sbyte TYPE_HARDWARE = 0x04;

        public const sbyte TYPE_HSM = 0x08;

        public const sbyte TYPE_CPU = 0x0C;

        public const sbyte TYPE_MASK = 0x0C;

        public short APILevel
        {
            get { return _api_level; }
        }

        public sbyte DeviceType
        {
            get { return _device_type; }
        }

        public string UpdateURL
        {
            get { return _update_url; }
        }

        public string VendorName
        {
            get { return _vendor_name; }
        }

        public string VendorDescription
        {
            get { return _vendor_description; }
        }

        public X509Certificate2[] CertificatePath
        {
            get { return Conversions.BinaryListToCertificates(_certificate_path); }
        }

        public string[] SupportedAlgorithms
        {
            get { return _supported_algorithms.ToArray(); }
        }

        public int CryptoDataSize
        {
            get { return _crypto_data_size; }
        }

        public int ExtensionDataSize
        {
            get { return _extension_data_size; }
        }

        public bool DevicePINSupport
        {
            get { return _device_pin_support; }
        }

        public bool BiometricSupport
        {
            get { return _biometric_support; }
        }

        public string ConnectionPort
        {
            get { return _connection_port; }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createProvisioningSession", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class createProvisioningSession_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="SessionKeyAlgorithm", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _session_key_algorithm;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PrivacyEnabled", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal bool _privacy_enabled;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ServerSessionID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _server_session_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ServerEphemeralKey", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _server_ephemeral_key;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="IssuerURI", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _issuer_uri;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyManagementKey", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _key_management_key;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=7)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ClientTime", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _client_time;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="SessionLifeTime", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _session_life_time;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=9)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="SessionKeyLimit", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal short _session_key_limit;

        public createProvisioningSession_Request(string DeviceID,
                                                 string SessionKeyAlgorithm,
                                                 bool PrivacyEnabled,
                                                 string ServerSessionID,
                                                 byte[] ServerEphemeralKey,
                                                 string IssuerURI,
                                                 byte[] KeyManagementKey,
                                                 int ClientTime,
                                                 int SessionLifeTime,
                                                 short SessionKeyLimit)
        {
            _device_id = DeviceID;
            _session_key_algorithm = SessionKeyAlgorithm;
            _privacy_enabled = PrivacyEnabled;
            _server_session_id = ServerSessionID;
            _server_ephemeral_key = ServerEphemeralKey;
            _issuer_uri = IssuerURI;
            _key_management_key = KeyManagementKey;
            _client_time = ClientTime;
            _session_life_time = SessionLifeTime;
            _session_key_limit = SessionKeyLimit;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createProvisioningSession.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class ProvisioningSession
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal int _provisioning_handle;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ClientSessionID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _client_session_id;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ClientEphemeralKey", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _client_ephemeral_key;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Attestation", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _attestation;
        #pragma warning restore 0649

        internal ProvisioningSession () {}

        public int ProvisioningHandle
        {
            get { return _provisioning_handle; }
        }

        public string ClientSessionID
        {
            get { return _client_session_id; }
        }

        public PublicKey ClientEphemeralKey
        {
            get { return Conversions.DecodeX509ECPublicKey(_client_ephemeral_key); }
        }

        public byte[] Attestation
        {
            get { return _attestation; }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="closeProvisioningSession", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class closeProvisioningSession_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _provisioning_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Nonce", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _nonce;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _mac;

        public closeProvisioningSession_Request(string DeviceID,
                                                int ProvisioningHandle,
                                                byte[] Nonce,
                                                byte[] MAC)
        {
            _device_id = DeviceID;
            _provisioning_handle = ProvisioningHandle;
            _nonce = Nonce;
            _mac = MAC;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="closeProvisioningSession.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class closeProvisioningSession_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="CloseAttestation", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _close_attestation;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="enumerateProvisioningSessions", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class enumerateProvisioningSessions_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _provisioning_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningState", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal bool _provisioning_state;

        public enumerateProvisioningSessions_Request(string DeviceID,
                                                     int ProvisioningHandle,
                                                     bool ProvisioningState)
        {
            _device_id = DeviceID;
            _provisioning_handle = ProvisioningHandle;
            _provisioning_state = ProvisioningState;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="enumerateProvisioningSessions.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class EnumeratedProvisioningSession
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal int _provisioning_handle;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="SessionKeyAlgorithm", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _session_key_algorithm;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PrivacyEnabled", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal bool _privacy_enabled;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyManagementKey", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _key_management_key;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ClientTime", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal int _client_time;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="SessionLifeTime", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal int _session_life_time;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ServerSessionID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _server_session_id;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=7)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ClientSessionID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _client_session_id;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="IssuerURI", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _issuer_uri;
        #pragma warning restore 0649

        public int ProvisioningHandle
        {
            get { return _provisioning_handle; }
        }

        public string SessionKeyAlgorithm
        {
            get { return _session_key_algorithm; }
        }

        public bool PrivacyEnabled
        {
            get { return _privacy_enabled; }
        }

        public PublicKey KeyManagementKey
        {
            get { return Conversions.DecodeX509PublicKey(_key_management_key); }
        }

        public int ClientTime
        {
            get { return _client_time; }
        }

        public int SessionLifeTime
        {
            get { return _session_life_time; }
        }

        public string ServerSessionID
        {
            get { return _server_session_id; }
        }

        public string ClientSessionID
        {
            get { return _client_session_id; }
        }

        public string IssuerURI
        {
            get { return _issuer_uri; }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="abortProvisioningSession", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class abortProvisioningSession_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _provisioning_handle;

        public abortProvisioningSession_Request(string DeviceID,
                                                int ProvisioningHandle)
        {
            _device_id = DeviceID;
            _provisioning_handle = ProvisioningHandle;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="abortProvisioningSession.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class abortProvisioningSession_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="signProvisioningSessionData", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class signProvisioningSessionData_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _provisioning_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Data", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _data;

        public signProvisioningSessionData_Request(string DeviceID,
                                                   int ProvisioningHandle,
                                                   byte[] Data)
        {
            _device_id = DeviceID;
            _provisioning_handle = ProvisioningHandle;
            _data = Data;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="signProvisioningSessionData.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class signProvisioningSessionData_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Signature", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _signature;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createPukPolicy", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class createPukPolicy_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _provisioning_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="EncryptedPuk", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _encrypted_puk;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Format", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal sbyte _format;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="RetryLimit", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal short _retry_limit;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _mac;

        public createPukPolicy_Request(string DeviceID,
                                       int ProvisioningHandle,
                                       string ID,
                                       byte[] EncryptedPuk,
                                       sbyte Format,
                                       short RetryLimit,
                                       byte[] MAC)
        {
            _device_id = DeviceID;
            _provisioning_handle = ProvisioningHandle;
            _id = ID;
            _encrypted_puk = EncryptedPuk;
            _format = Format;
            _retry_limit = RetryLimit;
            _mac = MAC;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createPukPolicy.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class createPukPolicy_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PukPolicyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal int _puk_policy_handle;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createPinPolicy", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class createPinPolicy_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _provisioning_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PukPolicyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _puk_policy_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="UserDefined", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal bool _user_defined;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="UserModifiable", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal bool _user_modifiable;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Format", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal sbyte _format;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=7)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="RetryLimit", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal short _retry_limit;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Grouping", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal sbyte _grouping;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=9)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PatternRestrictions", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal sbyte _pattern_restrictions;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=10)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MinLength", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal short _min_length;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=11)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MaxLength", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal short _max_length;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=12)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="InputMethod", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal sbyte _input_method;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=13)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _mac;

        public createPinPolicy_Request(string DeviceID,
                                       int ProvisioningHandle,
                                       string ID,
                                       int PukPolicyHandle,
                                       bool UserDefined,
                                       bool UserModifiable,
                                       sbyte Format,
                                       short RetryLimit,
                                       sbyte Grouping,
                                       sbyte PatternRestrictions,
                                       short MinLength,
                                       short MaxLength,
                                       sbyte InputMethod,
                                       byte[] MAC)
        {
            _device_id = DeviceID;
            _provisioning_handle = ProvisioningHandle;
            _id = ID;
            _puk_policy_handle = PukPolicyHandle;
            _user_defined = UserDefined;
            _user_modifiable = UserModifiable;
            _format = Format;
            _retry_limit = RetryLimit;
            _grouping = Grouping;
            _pattern_restrictions = PatternRestrictions;
            _min_length = MinLength;
            _max_length = MaxLength;
            _input_method = InputMethod;
            _mac = MAC;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createPinPolicy.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class createPinPolicy_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PINPolicyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal int _pin_policy_handle;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createKeyEntry", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class createKeyEntry_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _provisioning_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyEntryAlgorithm", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _key_entry_algorithm;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ServerSeed", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _server_seed;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DevicePinProtection", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal bool _device_pin_protection;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PinPolicyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _pin_policy_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=7)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PinValue", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _pin_value;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="EnablePinCaching", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal bool _enable_pin_caching;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=9)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="BiometricProtection", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal sbyte _biometric_protection;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=10)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ExportProtection", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal sbyte _export_protection;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=11)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeleteProtection", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal sbyte _delete_protection;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=12)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="AppUsage", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal sbyte _app_usage;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=13)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="FriendlyName", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _friendly_name;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=14)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyAlgorithm", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _key_algorithm;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=15)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyParameters", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _key_parameters;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=16)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="EndorsedAlgorithm", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal List<string> _endorsed_algorithms;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=17)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _mac;

        public createKeyEntry_Request(string DeviceID,
                                      int ProvisioningHandle,
                                      string ID,
                                      string KeyEntryAlgorithm,
                                      byte[] ServerSeed,
                                      bool DevicePinProtection,
                                      int PinPolicyHandle,
                                      byte[] PinValue,
                                      bool EnablePinCaching,
                                      sbyte BiometricProtection,
                                      sbyte ExportProtection,
                                      sbyte DeleteProtection,
                                      sbyte AppUsage,
                                      string FriendlyName,
                                      string KeyAlgorithm,
                                      byte[] KeyParameters,
                                      List<string> EndorsedAlgorithms,
                                      byte[] MAC)
        {
            _device_id = DeviceID;
            _provisioning_handle = ProvisioningHandle;
            _id = ID;
            _key_entry_algorithm = KeyEntryAlgorithm;
            _server_seed = ServerSeed;
            _device_pin_protection = DevicePinProtection;
            _pin_policy_handle = PinPolicyHandle;
            _pin_value = PinValue;
            _enable_pin_caching = EnablePinCaching;
            _biometric_protection = BiometricProtection;
            _export_protection = ExportProtection;
            _delete_protection = DeleteProtection;
            _app_usage = AppUsage;
            _friendly_name = FriendlyName;
            _key_algorithm = KeyAlgorithm;
            _key_parameters = KeyParameters;
            _endorsed_algorithms = EndorsedAlgorithms;
            _mac = MAC;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="createKeyEntry.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class KeyData
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal int _key_handle;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PublicKey", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _public_key;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Attestation", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _attestation;
        #pragma warning restore 0649

        internal KeyData () {}

        public int KeyHandle
        {
            get { return _key_handle; }
        }

        public PublicKey PublicKey
        {
            get { return Conversions.DecodeX509PublicKey(_public_key); }
        }

        public byte[] Attestation
        {
            get { return _attestation; }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getKeyHandle", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class getKeyHandle_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _provisioning_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _id;

        public getKeyHandle_Request(string DeviceID,
                                    int ProvisioningHandle,
                                    string ID)
        {
            _device_id = DeviceID;
            _provisioning_handle = ProvisioningHandle;
            _id = ID;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getKeyHandle.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class getKeyHandle_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal int _key_handle;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="setCertificatePath", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class setCertificatePath_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="X509Certificate", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal List<byte[]> _certificate_path;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _mac;

        public setCertificatePath_Request(string DeviceID,
                                          int KeyHandle,
                                          List<byte[]> CertificatePath,
                                          byte[] MAC)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _certificate_path = CertificatePath;
            _mac = MAC;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="setCertificatePath.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class setCertificatePath_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="importSymmetricKey", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class importSymmetricKey_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="EncryptedKey", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _encrypted_key;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _mac;

        public importSymmetricKey_Request(string DeviceID,
                                          int KeyHandle,
                                          byte[] EncryptedKey,
                                          byte[] MAC)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _encrypted_key = EncryptedKey;
            _mac = MAC;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="importSymmetricKey.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class importSymmetricKey_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="importPrivateKey", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class importPrivateKey_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="EncryptedKey", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _encrypted_key;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _mac;

        public importPrivateKey_Request(string DeviceID,
                                        int KeyHandle,
                                        byte[] EncryptedKey,
                                        byte[] MAC)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _encrypted_key = EncryptedKey;
            _mac = MAC;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="importPrivateKey.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class importPrivateKey_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="addExtension", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class addExtension_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Type", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _type;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="SubType", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal sbyte _sub_type;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Qualifier", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _qualifier;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ExtensionData", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _extension_data;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _mac;

        public addExtension_Request(string DeviceID,
                                    int KeyHandle,
                                    string Type,
                                    sbyte SubType,
                                    string Qualifier,
                                    byte[] ExtensionData,
                                    byte[] MAC)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _type = Type;
            _sub_type = SubType;
            _qualifier = Qualifier;
            _extension_data = ExtensionData;
            _mac = MAC;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="addExtension.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class addExtension_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postDeleteKey", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class postDeleteKey_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _provisioning_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TargetKeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _target_key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _mac;

        public postDeleteKey_Request(string DeviceID,
                                     int ProvisioningHandle,
                                     int TargetKeyHandle,
                                     byte[] Authorization,
                                     byte[] MAC)
        {
            _device_id = DeviceID;
            _provisioning_handle = ProvisioningHandle;
            _target_key_handle = TargetKeyHandle;
            _authorization = Authorization;
            _mac = MAC;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postDeleteKey.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class postDeleteKey_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postUnlockKey", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class postUnlockKey_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _provisioning_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TargetKeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _target_key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _mac;

        public postUnlockKey_Request(string DeviceID,
                                     int ProvisioningHandle,
                                     int TargetKeyHandle,
                                     byte[] Authorization,
                                     byte[] MAC)
        {
            _device_id = DeviceID;
            _provisioning_handle = ProvisioningHandle;
            _target_key_handle = TargetKeyHandle;
            _authorization = Authorization;
            _mac = MAC;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postUnlockKey.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class postUnlockKey_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postUpdateKey", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class postUpdateKey_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TargetKeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _target_key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _mac;

        public postUpdateKey_Request(string DeviceID,
                                     int KeyHandle,
                                     int TargetKeyHandle,
                                     byte[] Authorization,
                                     byte[] MAC)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _target_key_handle = TargetKeyHandle;
            _authorization = Authorization;
            _mac = MAC;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postUpdateKey.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class postUpdateKey_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postCloneKeyProtection", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class postCloneKeyProtection_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TargetKeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _target_key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _mac;

        public postCloneKeyProtection_Request(string DeviceID,
                                              int KeyHandle,
                                              int TargetKeyHandle,
                                              byte[] Authorization,
                                              byte[] MAC)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _target_key_handle = TargetKeyHandle;
            _authorization = Authorization;
            _mac = MAC;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="postCloneKeyProtection.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class postCloneKeyProtection_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="enumerateKeys", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class enumerateKeys_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        public enumerateKeys_Request(string DeviceID,
                                     int KeyHandle)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="enumerateKeys.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class EnumeratedKey
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal int _key_handle;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal int _provisioning_handle;
        #pragma warning restore 0649

        public int KeyHandle
        {
            get { return _key_handle; }
        }

        public int ProvisioningHandle
        {
            get { return _provisioning_handle; }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="updateKeyManagementKey", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class updateKeyManagementKey_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProvisioningHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _provisioning_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyManagementKey", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _key_management_key;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Attestation", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _attestation;

        public updateKeyManagementKey_Request(string DeviceID,
                                              int ProvisioningHandle,
                                              byte[] KeyManagementKey,
                                              byte[] Attestation)
        {
            _device_id = DeviceID;
            _provisioning_handle = ProvisioningHandle;
            _key_management_key = KeyManagementKey;
            _attestation = Attestation;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="updateKeyManagementKey.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class updateKeyManagementKey_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getKeyAttributes", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class getKeyAttributes_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        public getKeyAttributes_Request(string DeviceID,
                                        int KeyHandle)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getKeyAttributes.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class KeyAttributes
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="SymmetricKeyLength", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal short _symmetric_key_length;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="X509Certificate", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal List<byte[]> _certificate_path;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="AppUsage", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _app_usage;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="FriendlyName", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _friendly_name;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="EndorsedAlgorithm", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal List<string> _endorsed_algorithms;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ExtensionType", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal List<string> _extension_types;
        #pragma warning restore 0649

        internal KeyAttributes () {}

        public short SymmetricKeyLength
        {
            get { return _symmetric_key_length; }
        }

        public X509Certificate2[] CertificatePath
        {
            get { return Conversions.BinaryListToCertificates(_certificate_path); }
        }

        public AppUsage AppUsage
        {
            get { return (AppUsage)_app_usage; }
        }

        public string FriendlyName
        {
            get { return _friendly_name; }
        }

        public string[] EndorsedAlgorithms
        {
            get { return _endorsed_algorithms.ToArray(); }
        }

        public string[] ExtensionTypes
        {
            get { return _extension_types.ToArray(); }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getKeyProtectionInfo", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class getKeyProtectionInfo_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        public getKeyProtectionInfo_Request(string DeviceID,
                                            int KeyHandle)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getKeyProtectionInfo.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class KeyProtectionInfo
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProtectionStatus", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _protection_status;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PukFormat", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _puk_format;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PukRetryLimit", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal short _puk_retry_limit;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PukErrorCount", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal short _puk_error_count;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="UserDefined", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal bool _user_defined;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="UserModifiable", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal bool _user_modifiable;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Format", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _format;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=7)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="RetryLimit", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal short _retry_limit;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=8)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Grouping", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _grouping;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=9)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PatternRestrictions", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _pattern_restrictions;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=10)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MinLength", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal short _min_length;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=11)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MaxLength", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal short _max_length;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=12)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="InputMethod", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _input_method;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=13)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PinErrorCount", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal short _pin_error_count;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=14)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="EnablePinCaching", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal bool _enable_pin_caching;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=15)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="BiometricProtection", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _biometric_protection;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=16)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ExportProtection", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _export_protection;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=17)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeleteProtection", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _delete_protection;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=18)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyBackup", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _key_backup;
        #pragma warning restore 0649

        internal KeyProtectionInfo () {}

        public const sbyte PROTSTAT_PIN_PROTECTED = 0x01;

        public const sbyte PROTSTAT_PUK_PROTECTED = 0x02;

        public const sbyte PROTSTAT_PIN_BLOCKED = 0x04;

        public const sbyte PROTSTAT_PUK_BLOCKED = 0x08;

        public const sbyte PROTSTAT_DEVICE_PIN = 0x10;

        public const sbyte KEYBACKUP_IMPORTED = 0x01;

        public const sbyte KEYBACKUP_EXPORTED = 0x02;

        public sbyte ProtectionStatus
        {
            get { return _protection_status; }
        }

        public PassphraseFormat PukFormat
        {
            get { return (PassphraseFormat)_puk_format; }
        }

        public short PukRetryLimit
        {
            get { return _puk_retry_limit; }
        }

        public short PukErrorCount
        {
            get { return _puk_error_count; }
        }

        public bool UserDefined
        {
            get { return _user_defined; }
        }

        public bool UserModifiable
        {
            get { return _user_modifiable; }
        }

        public PassphraseFormat Format
        {
            get { return (PassphraseFormat)_format; }
        }

        public short RetryLimit
        {
            get { return _retry_limit; }
        }

        public Grouping Grouping
        {
            get { return (Grouping)_grouping; }
        }

        public HashSet<PatternRestriction> PatternRestrictions
        {
            get { return Conversions.SKSToPatternRestrictions(_pattern_restrictions); }
        }

        public short MinLength
        {
            get { return _min_length; }
        }

        public short MaxLength
        {
            get { return _max_length; }
        }

        public InputMethod InputMethod
        {
            get { return (InputMethod)_input_method; }
        }

        public short PinErrorCount
        {
            get { return _pin_error_count; }
        }

        public bool EnablePinCaching
        {
            get { return _enable_pin_caching; }
        }

        public BiometricProtection BiometricProtection
        {
            get { return (BiometricProtection)_biometric_protection; }
        }

        public ExportProtection ExportProtection
        {
            get { return (ExportProtection)_export_protection; }
        }

        public DeleteProtection DeleteProtection
        {
            get { return (DeleteProtection)_delete_protection; }
        }

        public sbyte KeyBackup
        {
            get { return _key_backup; }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getExtension", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class getExtension_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Type", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _type;

        public getExtension_Request(string DeviceID,
                                    int KeyHandle,
                                    string Type)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _type = Type;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getExtension.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class Extension
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="SubType", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal sbyte _sub_type;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Qualifier", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _qualifier;
        #pragma warning restore 0649

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ExtensionData", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _extension_data;
        #pragma warning restore 0649

        internal Extension () {}

        public sbyte SubType
        {
            get { return _sub_type; }
        }

        public string Qualifier
        {
            get { return _qualifier; }
        }

        public byte[] ExtensionData
        {
            get { return _extension_data; }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="setProperty", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class setProperty_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Type", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _type;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Name", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _name;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Value", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _value;

        public setProperty_Request(string DeviceID,
                                   int KeyHandle,
                                   string Type,
                                   string Name,
                                   string Value)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _type = Type;
            _name = Name;
            _value = Value;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="setProperty.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class setProperty_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="deleteKey", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class deleteKey_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        public deleteKey_Request(string DeviceID,
                                 int KeyHandle,
                                 byte[] Authorization)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _authorization = Authorization;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="deleteKey.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class deleteKey_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="exportKey", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class exportKey_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        public exportKey_Request(string DeviceID,
                                 int KeyHandle,
                                 byte[] Authorization)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _authorization = Authorization;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="exportKey.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class exportKey_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Key", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _key;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="unlockKey", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class unlockKey_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        public unlockKey_Request(string DeviceID,
                                 int KeyHandle,
                                 byte[] Authorization)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _authorization = Authorization;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="unlockKey.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class unlockKey_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="changePin", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class changePin_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="NewPin", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _new_pin;

        public changePin_Request(string DeviceID,
                                 int KeyHandle,
                                 byte[] Authorization,
                                 byte[] NewPin)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _authorization = Authorization;
            _new_pin = NewPin;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="changePin.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class changePin_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="setPin", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class setPin_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="NewPin", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _new_pin;

        public setPin_Request(string DeviceID,
                              int KeyHandle,
                              byte[] Authorization,
                              byte[] NewPin)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _authorization = Authorization;
            _new_pin = NewPin;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="setPin.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class setPin_Response
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="signHashedData", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class signHashedData_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Algorithm", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _algorithm;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Parameters", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _parameters;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TrustedGUIAuthorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal bool _trusted_gui_authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Data", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _data;

        public signHashedData_Request(string DeviceID,
                                      int KeyHandle,
                                      string Algorithm,
                                      byte[] Parameters,
                                      bool TrustedGUIAuthorization,
                                      byte[] Authorization,
                                      byte[] Data)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _algorithm = Algorithm;
            _parameters = Parameters;
            _trusted_gui_authorization = TrustedGUIAuthorization;
            _authorization = Authorization;
            _data = Data;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="signHashedData.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class signHashedData_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Result", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _result;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="asymmetricKeyDecrypt", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class asymmetricKeyDecrypt_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Algorithm", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _algorithm;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Parameters", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _parameters;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TrustedGUIAuthorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal bool _trusted_gui_authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Data", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _data;

        public asymmetricKeyDecrypt_Request(string DeviceID,
                                            int KeyHandle,
                                            string Algorithm,
                                            byte[] Parameters,
                                            bool TrustedGUIAuthorization,
                                            byte[] Authorization,
                                            byte[] Data)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _algorithm = Algorithm;
            _parameters = Parameters;
            _trusted_gui_authorization = TrustedGUIAuthorization;
            _authorization = Authorization;
            _data = Data;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="asymmetricKeyDecrypt.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class asymmetricKeyDecrypt_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Result", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _result;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="keyAgreement", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class keyAgreement_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Algorithm", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _algorithm;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Parameters", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _parameters;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TrustedGUIAuthorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal bool _trusted_gui_authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="PublicKey", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _public_key;

        public keyAgreement_Request(string DeviceID,
                                    int KeyHandle,
                                    string Algorithm,
                                    byte[] Parameters,
                                    bool TrustedGUIAuthorization,
                                    byte[] Authorization,
                                    byte[] PublicKey)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _algorithm = Algorithm;
            _parameters = Parameters;
            _trusted_gui_authorization = TrustedGUIAuthorization;
            _authorization = Authorization;
            _public_key = PublicKey;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="keyAgreement.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class keyAgreement_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Result", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _result;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="performHmac", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class performHmac_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Algorithm", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _algorithm;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Parameters", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _parameters;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TrustedGUIAuthorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal bool _trusted_gui_authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Data", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _data;

        public performHmac_Request(string DeviceID,
                                   int KeyHandle,
                                   string Algorithm,
                                   byte[] Parameters,
                                   bool TrustedGUIAuthorization,
                                   byte[] Authorization,
                                   byte[] Data)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _algorithm = Algorithm;
            _parameters = Parameters;
            _trusted_gui_authorization = TrustedGUIAuthorization;
            _authorization = Authorization;
            _data = Data;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="performHmac.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class performHmac_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Result", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _result;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="symmetricKeyEncrypt", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class symmetricKeyEncrypt_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal int _key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Algorithm", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _algorithm;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Mode", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal bool _mode;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=4)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Parameters", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _parameters;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=5)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="TrustedGUIAuthorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal bool _trusted_gui_authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=6)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Authorization", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _authorization;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=7)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Data", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _data;

        public symmetricKeyEncrypt_Request(string DeviceID,
                                           int KeyHandle,
                                           string Algorithm,
                                           bool Mode,
                                           byte[] Parameters,
                                           bool TrustedGUIAuthorization,
                                           byte[] Authorization,
                                           byte[] Data)
        {
            _device_id = DeviceID;
            _key_handle = KeyHandle;
            _algorithm = Algorithm;
            _mode = Mode;
            _parameters = Parameters;
            _trusted_gui_authorization = TrustedGUIAuthorization;
            _authorization = Authorization;
            _data = Data;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="symmetricKeyEncrypt.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class symmetricKeyEncrypt_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Result", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal byte[] _result;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="updateFirmware", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class updateFirmware_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _device_id;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Chunk", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal byte[] _chunk;

        public updateFirmware_Request(string DeviceID,
                                      byte[] Chunk)
        {
            _device_id = DeviceID;
            _chunk = Chunk;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="updateFirmware.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class updateFirmware_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="NextURL", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _next_url;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="listDevices", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class listDevices_Request
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="listDevices.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class listDevices_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="DeviceID", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal List<string> _devices;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getVersion", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class getVersion_Request
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getVersion.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class getVersion_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Version", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        #pragma warning disable 0649
        internal string _version;
        #pragma warning restore 0649
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="logEvent", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class logEvent_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v1.00", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="Description", Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        internal string _description;

        public logEvent_Request(string Description)
        {
            _description = Description;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="logEvent.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v1.00", IsWrapped=true)]
    public class logEvent_Response
    {
    }

    public partial class SKSWSProxy : System.ServiceModel.ClientBase<SKSWSProxyInterface>
    {
        public const string ALGORITHM_SESSION_KEY_ATTEST_1 = "http://xmlns.webpki.org/keygen2/1.0#algorithm.sks.s1";

        public const string ALGORITHM_KEY_ATTEST_1 = "http://xmlns.webpki.org/keygen2/1.0#algorithm.sks.k1";

        public static SKSWSProxy getDefaultSKSWSProxy()
        {
            Microsoft.Win32.RegistryKey reg_entry = Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive.LocalMachine,
                                                                        System.Environment.Is64BitOperatingSystem ?
                                                                          Microsoft.Win32.RegistryView.Registry64 : Microsoft.Win32.RegistryView.Registry32)
                .OpenSubKey(@"SOFTWARE\WebPKI.org");
            string ws_url = reg_entry == null ? null : (string) reg_entry.GetValue ("SKSWSURL");
            if (ws_url == null)
            {
                 throw new System.ArgumentException(@"No such registry entry: SOFTWARE\WebPKI.org\SKSWSURL");
            }
            System.ServiceModel.BasicHttpBinding ws_bind = new System.ServiceModel.BasicHttpBinding();
            ws_bind.SendTimeout = System.TimeSpan.FromMinutes(5);
            return new SKSWSProxy(ws_bind, new System.ServiceModel.EndpointAddress(ws_url));
        }

        public SKSWSProxy(string endpointConfigurationName) : base(endpointConfigurationName)
        {
        }

        public SKSWSProxy(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : base(binding, remoteAddress)
        {
        }

        public DeviceInfo getDeviceInfo()
        {
            try
            {
                return base.Channel.getDeviceInfo(new getDeviceInfo_Request(device_id));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public ProvisioningSession createProvisioningSession(string SessionKeyAlgorithm,
                                                             bool PrivacyEnabled,
                                                             string ServerSessionID,
                                                             PublicKey ServerEphemeralKey,
                                                             string IssuerURI,
                                                             PublicKey KeyManagementKey,
                                                             int ClientTime,
                                                             int SessionLifeTime,
                                                             short SessionKeyLimit)
        {
            try
            {
                return base.Channel.createProvisioningSession(new createProvisioningSession_Request(device_id,
                                                                                                    SessionKeyAlgorithm,
                                                                                                    PrivacyEnabled,
                                                                                                    ServerSessionID,
                                                                                                    Conversions.EncodeX509ECPublicKey(ServerEphemeralKey),
                                                                                                    IssuerURI,
                                                                                                    Conversions.EncodeX509PublicKey(KeyManagementKey),
                                                                                                    ClientTime,
                                                                                                    SessionLifeTime,
                                                                                                    SessionKeyLimit));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public byte[] closeProvisioningSession(int ProvisioningHandle,
                                               byte[] Nonce,
                                               byte[] MAC)
        {
            try
            {
                return base.Channel.closeProvisioningSession(new closeProvisioningSession_Request(device_id,
                                                                                                  ProvisioningHandle,
                                                                                                  Nonce,
                                                                                                  MAC))._close_attestation;
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public EnumeratedProvisioningSession enumerateProvisioningSessions(int ProvisioningHandle,
                                                                           bool ProvisioningState)
        {
            try
            {
                EnumeratedProvisioningSession _res = base.Channel.enumerateProvisioningSessions(new enumerateProvisioningSessions_Request(device_id,
                                                                                                                                          ProvisioningHandle,
                                                                                                                                          ProvisioningState));
                return _res._provisioning_handle == 0 ? null : _res;
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void abortProvisioningSession(int ProvisioningHandle)
        {
            try
            {
                base.Channel.abortProvisioningSession(new abortProvisioningSession_Request(device_id,
                                                                                           ProvisioningHandle));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public byte[] signProvisioningSessionData(int ProvisioningHandle,
                                                  byte[] Data)
        {
            try
            {
                return base.Channel.signProvisioningSessionData(new signProvisioningSessionData_Request(device_id,
                                                                                                        ProvisioningHandle,
                                                                                                        Data))._signature;
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public int createPukPolicy(int ProvisioningHandle,
                                   string ID,
                                   byte[] EncryptedPuk,
                                   PassphraseFormat Format,
                                   short RetryLimit,
                                   byte[] MAC)
        {
            try
            {
                return base.Channel.createPukPolicy(new createPukPolicy_Request(device_id,
                                                                                ProvisioningHandle,
                                                                                ID,
                                                                                EncryptedPuk,
                                                                                (sbyte)Format,
                                                                                RetryLimit,
                                                                                MAC))._puk_policy_handle;
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public int createPinPolicy(int ProvisioningHandle,
                                   string ID,
                                   int PukPolicyHandle,
                                   bool UserDefined,
                                   bool UserModifiable,
                                   PassphraseFormat Format,
                                   short RetryLimit,
                                   Grouping Grouping,
                                   HashSet<PatternRestriction> PatternRestrictions,
                                   short MinLength,
                                   short MaxLength,
                                   InputMethod InputMethod,
                                   byte[] MAC)
        {
            try
            {
                return base.Channel.createPinPolicy(new createPinPolicy_Request(device_id,
                                                                                ProvisioningHandle,
                                                                                ID,
                                                                                PukPolicyHandle,
                                                                                UserDefined,
                                                                                UserModifiable,
                                                                                (sbyte)Format,
                                                                                RetryLimit,
                                                                                (sbyte)Grouping,
                                                                                Conversions.PatternRestrictionsToSKS(PatternRestrictions),
                                                                                MinLength,
                                                                                MaxLength,
                                                                                (sbyte)InputMethod,
                                                                                MAC))._pin_policy_handle;
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public KeyData createKeyEntry(int ProvisioningHandle,
                                      string ID,
                                      string KeyEntryAlgorithm,
                                      byte[] ServerSeed,
                                      bool DevicePinProtection,
                                      int PinPolicyHandle,
                                      byte[] PinValue,
                                      bool EnablePinCaching,
                                      BiometricProtection BiometricProtection,
                                      ExportProtection ExportProtection,
                                      DeleteProtection DeleteProtection,
                                      AppUsage AppUsage,
                                      string FriendlyName,
                                      string KeyAlgorithm,
                                      byte[] KeyParameters,
                                      string[] EndorsedAlgorithms,
                                      byte[] MAC)
        {
            try
            {
                return base.Channel.createKeyEntry(new createKeyEntry_Request(device_id,
                                                                              ProvisioningHandle,
                                                                              ID,
                                                                              KeyEntryAlgorithm,
                                                                              ServerSeed,
                                                                              DevicePinProtection,
                                                                              PinPolicyHandle,
                                                                              PinValue,
                                                                              EnablePinCaching,
                                                                              (sbyte)BiometricProtection,
                                                                              (sbyte)ExportProtection,
                                                                              (sbyte)DeleteProtection,
                                                                              (sbyte)AppUsage,
                                                                              FriendlyName,
                                                                              KeyAlgorithm,
                                                                              KeyParameters,
                                                                              new List<string>(EndorsedAlgorithms),
                                                                              MAC));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public int getKeyHandle(int ProvisioningHandle,
                                string ID)
        {
            try
            {
                return base.Channel.getKeyHandle(new getKeyHandle_Request(device_id,
                                                                          ProvisioningHandle,
                                                                          ID))._key_handle;
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void setCertificatePath(int KeyHandle,
                                       X509Certificate2[] CertificatePath,
                                       byte[] MAC)
        {
            try
            {
                base.Channel.setCertificatePath(new setCertificatePath_Request(device_id,
                                                                               KeyHandle,
                                                                               Conversions.CertificatesToBinaryList(CertificatePath),
                                                                               MAC));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void importSymmetricKey(int KeyHandle,
                                       byte[] EncryptedKey,
                                       byte[] MAC)
        {
            try
            {
                base.Channel.importSymmetricKey(new importSymmetricKey_Request(device_id,
                                                                               KeyHandle,
                                                                               EncryptedKey,
                                                                               MAC));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void importPrivateKey(int KeyHandle,
                                     byte[] EncryptedKey,
                                     byte[] MAC)
        {
            try
            {
                base.Channel.importPrivateKey(new importPrivateKey_Request(device_id,
                                                                           KeyHandle,
                                                                           EncryptedKey,
                                                                           MAC));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void addExtension(int KeyHandle,
                                 string Type,
                                 sbyte SubType,
                                 string Qualifier,
                                 byte[] ExtensionData,
                                 byte[] MAC)
        {
            try
            {
                base.Channel.addExtension(new addExtension_Request(device_id,
                                                                   KeyHandle,
                                                                   Type,
                                                                   SubType,
                                                                   Qualifier,
                                                                   ExtensionData,
                                                                   MAC));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void postDeleteKey(int ProvisioningHandle,
                                  int TargetKeyHandle,
                                  byte[] Authorization,
                                  byte[] MAC)
        {
            try
            {
                base.Channel.postDeleteKey(new postDeleteKey_Request(device_id,
                                                                     ProvisioningHandle,
                                                                     TargetKeyHandle,
                                                                     Authorization,
                                                                     MAC));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void postUnlockKey(int ProvisioningHandle,
                                  int TargetKeyHandle,
                                  byte[] Authorization,
                                  byte[] MAC)
        {
            try
            {
                base.Channel.postUnlockKey(new postUnlockKey_Request(device_id,
                                                                     ProvisioningHandle,
                                                                     TargetKeyHandle,
                                                                     Authorization,
                                                                     MAC));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void postUpdateKey(int KeyHandle,
                                  int TargetKeyHandle,
                                  byte[] Authorization,
                                  byte[] MAC)
        {
            try
            {
                base.Channel.postUpdateKey(new postUpdateKey_Request(device_id,
                                                                     KeyHandle,
                                                                     TargetKeyHandle,
                                                                     Authorization,
                                                                     MAC));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void postCloneKeyProtection(int KeyHandle,
                                           int TargetKeyHandle,
                                           byte[] Authorization,
                                           byte[] MAC)
        {
            try
            {
                base.Channel.postCloneKeyProtection(new postCloneKeyProtection_Request(device_id,
                                                                                       KeyHandle,
                                                                                       TargetKeyHandle,
                                                                                       Authorization,
                                                                                       MAC));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public EnumeratedKey enumerateKeys(int KeyHandle)
        {
            try
            {
                EnumeratedKey _res = base.Channel.enumerateKeys(new enumerateKeys_Request(device_id,
                                                                                          KeyHandle));
                return _res._key_handle == 0 ? null : _res;
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void updateKeyManagementKey(int ProvisioningHandle,
                                           PublicKey KeyManagementKey,
                                           byte[] Attestation)
        {
            try
            {
                base.Channel.updateKeyManagementKey(new updateKeyManagementKey_Request(device_id,
                                                                                       ProvisioningHandle,
                                                                                       Conversions.EncodeX509PublicKey(KeyManagementKey),
                                                                                       Attestation));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public KeyAttributes getKeyAttributes(int KeyHandle)
        {
            try
            {
                return base.Channel.getKeyAttributes(new getKeyAttributes_Request(device_id,
                                                                                  KeyHandle));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public KeyProtectionInfo getKeyProtectionInfo(int KeyHandle)
        {
            try
            {
                return base.Channel.getKeyProtectionInfo(new getKeyProtectionInfo_Request(device_id,
                                                                                          KeyHandle));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public Extension getExtension(int KeyHandle,
                                      string Type)
        {
            try
            {
                return base.Channel.getExtension(new getExtension_Request(device_id,
                                                                          KeyHandle,
                                                                          Type));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void setProperty(int KeyHandle,
                                string Type,
                                string Name,
                                string Value)
        {
            try
            {
                base.Channel.setProperty(new setProperty_Request(device_id,
                                                                 KeyHandle,
                                                                 Type,
                                                                 Name,
                                                                 Value));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void deleteKey(int KeyHandle,
                              byte[] Authorization)
        {
            try
            {
                base.Channel.deleteKey(new deleteKey_Request(device_id,
                                                             KeyHandle,
                                                             Authorization));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public byte[] exportKey(int KeyHandle,
                                byte[] Authorization)
        {
            try
            {
                return base.Channel.exportKey(new exportKey_Request(device_id,
                                                                    KeyHandle,
                                                                    Authorization))._key;
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void unlockKey(int KeyHandle,
                              byte[] Authorization)
        {
            try
            {
                base.Channel.unlockKey(new unlockKey_Request(device_id,
                                                             KeyHandle,
                                                             Authorization));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void changePin(int KeyHandle,
                              byte[] Authorization,
                              byte[] NewPin)
        {
            try
            {
                base.Channel.changePin(new changePin_Request(device_id,
                                                             KeyHandle,
                                                             Authorization,
                                                             NewPin));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public void setPin(int KeyHandle,
                           byte[] Authorization,
                           byte[] NewPin)
        {
            try
            {
                base.Channel.setPin(new setPin_Request(device_id,
                                                       KeyHandle,
                                                       Authorization,
                                                       NewPin));
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public byte[] signHashedData(int KeyHandle,
                                     string Algorithm,
                                     byte[] Parameters,
                                     byte[] Authorization,
                                     byte[] Data)
        {
            bool tga = false;
            while (true)
            {
                PerformTrustedGUIAuthorization(KeyHandle, ref Authorization, ref tga);
                try
                {
                    return base.Channel.signHashedData(new signHashedData_Request(device_id,
                                                                                  KeyHandle,
                                                                                  Algorithm,
                                                                                  Parameters,
                                                                                  tga,
                                                                                  Authorization,
                                                                                  Data))._result;
                }
                catch (System.ServiceModel.FaultException<_SKSException> e)
                {
                    if (!tga || (e.Detail.error != SKSException.ERROR_AUTHORIZATION))
                    {
                        throw new SKSException(e);
                    }
                    Authorization = null;
                }
            }
        }

        public byte[] asymmetricKeyDecrypt(int KeyHandle,
                                           string Algorithm,
                                           byte[] Parameters,
                                           byte[] Authorization,
                                           byte[] Data)
        {
            bool tga = false;
            while (true)
            {
                PerformTrustedGUIAuthorization(KeyHandle, ref Authorization, ref tga);
                try
                {
                    return base.Channel.asymmetricKeyDecrypt(new asymmetricKeyDecrypt_Request(device_id,
                                                                                              KeyHandle,
                                                                                              Algorithm,
                                                                                              Parameters,
                                                                                              tga,
                                                                                              Authorization,
                                                                                              Data))._result;
                }
                catch (System.ServiceModel.FaultException<_SKSException> e)
                {
                    if (!tga || (e.Detail.error != SKSException.ERROR_AUTHORIZATION))
                    {
                        throw new SKSException(e);
                    }
                    Authorization = null;
                }
            }
        }

        public byte[] keyAgreement(int KeyHandle,
                                   string Algorithm,
                                   byte[] Parameters,
                                   byte[] Authorization,
                                   PublicKey PublicKey)
        {
            bool tga = false;
            while (true)
            {
                PerformTrustedGUIAuthorization(KeyHandle, ref Authorization, ref tga);
                try
                {
                    return base.Channel.keyAgreement(new keyAgreement_Request(device_id,
                                                                              KeyHandle,
                                                                              Algorithm,
                                                                              Parameters,
                                                                              tga,
                                                                              Authorization,
                                                                              Conversions.EncodeX509PublicKey(PublicKey)))._result;
                }
                catch (System.ServiceModel.FaultException<_SKSException> e)
                {
                    if (!tga || (e.Detail.error != SKSException.ERROR_AUTHORIZATION))
                    {
                        throw new SKSException(e);
                    }
                    Authorization = null;
                }
            }
        }

        public byte[] performHmac(int KeyHandle,
                                  string Algorithm,
                                  byte[] Parameters,
                                  byte[] Authorization,
                                  byte[] Data)
        {
            bool tga = false;
            while (true)
            {
                PerformTrustedGUIAuthorization(KeyHandle, ref Authorization, ref tga);
                try
                {
                    return base.Channel.performHmac(new performHmac_Request(device_id,
                                                                            KeyHandle,
                                                                            Algorithm,
                                                                            Parameters,
                                                                            tga,
                                                                            Authorization,
                                                                            Data))._result;
                }
                catch (System.ServiceModel.FaultException<_SKSException> e)
                {
                    if (!tga || (e.Detail.error != SKSException.ERROR_AUTHORIZATION))
                    {
                        throw new SKSException(e);
                    }
                    Authorization = null;
                }
            }
        }

        public byte[] symmetricKeyEncrypt(int KeyHandle,
                                          string Algorithm,
                                          bool Mode,
                                          byte[] Parameters,
                                          byte[] Authorization,
                                          byte[] Data)
        {
            bool tga = false;
            while (true)
            {
                PerformTrustedGUIAuthorization(KeyHandle, ref Authorization, ref tga);
                try
                {
                    return base.Channel.symmetricKeyEncrypt(new symmetricKeyEncrypt_Request(device_id,
                                                                                            KeyHandle,
                                                                                            Algorithm,
                                                                                            Mode,
                                                                                            Parameters,
                                                                                            tga,
                                                                                            Authorization,
                                                                                            Data))._result;
                }
                catch (System.ServiceModel.FaultException<_SKSException> e)
                {
                    if (!tga || (e.Detail.error != SKSException.ERROR_AUTHORIZATION))
                    {
                        throw new SKSException(e);
                    }
                    Authorization = null;
                }
            }
        }

        public string updateFirmware(byte[] Chunk)
        {
            try
            {
                return base.Channel.updateFirmware(new updateFirmware_Request(device_id,
                                                                              Chunk))._next_url;
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public string[] listDevices()
        {
            try
            {
                return base.Channel.listDevices(new listDevices_Request())._devices.ToArray();
            }
            catch (System.ServiceModel.FaultException<_SKSException> e)
            {
                throw new SKSException(e);
            }
        }

        public string getVersion()
        {
            return base.Channel.getVersion(new getVersion_Request())._version;
        }

        public void logEvent(string Description)
        {
            base.Channel.logEvent(new logEvent_Request(Description));
        }
    }
}
